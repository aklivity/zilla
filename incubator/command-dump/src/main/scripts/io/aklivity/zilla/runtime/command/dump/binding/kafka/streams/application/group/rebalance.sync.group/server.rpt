#
# Copyright 2021-2023 Aklivity Inc
#
# Licensed under the Aklivity Community License (the "License"); you may not use
# this file except in compliance with the License.  You may obtain a copy of the
# License at
#
#   https://www.aklivity.io/aklivity-community-license/
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#

property serverAddress "zilla://streams/app0"

accept ${serverAddress}
    option zilla:timestamps "false"
    option zilla:window 8192
    option zilla:transmission "half-duplex"

accepted

read zilla:begin.ext ${kafka:matchBeginEx()
                               .typeId(zilla:id("kafka"))
                               .group()
                                   .groupId("test")
                                   .protocol("highlander")
                                   .timeout(45000)
                                   .build()
                               .build()}

connected

write zilla:begin.ext ${kafka:beginEx()
                               .typeId(zilla:id("kafka"))
                               .group()
                                   .groupId("test")
                                   .protocol("highlander")
                                   .instanceId("zilla")
                                   .host("broker1.example.com")
                                   .port(9092)
                                   .timeout(30000)
                                   .build()
                               .build()}
write flush

write advise zilla:flush ${kafka:flushEx()
                             .typeId(zilla:id("kafka"))
                             .group()
                                 .generationId(0)
                                 .leaderId("memberId-1")
                                 .memberId("memberId-1")
                                 .members("memberId-1")
                                 .build()
                             .build()}

read zilla:data.empty

write advise zilla:flush ${kafka:flushEx()
                             .typeId(zilla:id("kafka"))
                             .group()
                                 .generationId(1)
                                 .leaderId("memberId-1")
                                 .memberId("memberId-1")
                                 .members("memberId-1")
                                 .build()
                             .build()}

read zilla:data.empty

write zilla:data.empty
write flush

read closed
write close
