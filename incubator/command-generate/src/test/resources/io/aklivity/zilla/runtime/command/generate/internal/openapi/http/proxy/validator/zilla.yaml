name: example
bindings:
  tcp_server0:
    type: tcp
    kind: server
    options:
      host: 0.0.0.0
      port: 8080
    routes:
    - exit: http_server0
      when:
      - port: 8080
  http_server0:
    type: http
    kind: server
    options:
      access-control:
        policy: cross-origin
      requests:
      - path: /items
        method: GET
        params:
          query:
            limit: int32
      - path: /items
        method: POST
        content:
          model: json
          catalog:
            catalog0:
            - subject: Item
      - path: "/items/{id}"
        method: GET
        params:
          path:
            id: string
      - path: "/items/{id}"
        method: PUT
        headers:
          hello: int32
        params:
          path:
            id: string
          query:
            limit: int32
            ciao: string
      - path: "/items/{id}"
        method: DELETE
        params:
          path:
            id: string
    routes:
    - exit: http_client0
      when:
      - headers:
          :path: /items
          :method: GET
    - exit: http_client0
      when:
      - headers:
          :path: /items
          :method: POST
    - exit: http_client0
      when:
      - headers:
          :path: /items/*
          :method: GET
    - exit: http_client0
      when:
      - headers:
          :path: /items/*
          :method: PUT
    - exit: http_client0
      when:
      - headers:
          :path: /items/*
          :method: DELETE
  http_client0:
    type: http
    kind: client
    options:
      requests:
      - path: /items
        method: GET
        responses:
        - status: 200
          content-type:
          - application/json
          headers:
            x-pages: int32
            x-next: string
          content:
            model: json
            catalog:
              catalog0:
              - subject: Items
      - path: "/items/{id}"
        method: GET
        responses:
        - status: 200
          content-type:
          - application/json
          content:
            model: json
            catalog:
              catalog0:
              - subject: Item
    exit: tcp_client0
  tcp_client0:
    type: tcp
    kind: client
    options:
      host: "${{env.TCP_CLIENT_HOST}}"
      port: ${{env.TCP_CLIENT_PORT}}
catalogs:
  catalog0:
    type: inline
    options:
      subjects:
        Item:
          schema: |
            type: object
            properties:
              greeting:
                type: string
              tag:
                type: string
            required:
            - greeting
          version: latest
        Error:
          schema: |
            type: object
            properties:
              code:
                type: integer
              message:
                type: string
            required:
            - code
            - message
          version: latest
        Items:
          schema: |
            type: array
            items:
              type: object
              properties:
                greeting:
                  type: string
                tag:
                  type: string
              required:
              - greeting
          version: latest
