#
# Copyright 2021-2023 Aklivity Inc.
#
# Aklivity licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

accept "zilla://streams/asyncapi_kafka0"
        option zilla:window 8192
        option zilla:transmission "duplex"

accepted

read zilla:begin.ext ${asyncapi:matchBeginEx()
                             .typeId(zilla:id("asyncapi"))
                             .extension(kafka:beginEx()
                                .typeId(zilla:id("kafka"))
                                .merged()
                                    .capabilities("PRODUCE_AND_FETCH")
                                    .topic("mqtt-sessions")
                                    .groupId("mqtt-clients")
                                    .filter()
                                        .key("client#migrate")
                                        .headerNot("sender-id", "sender-1")
                                        .build()
                                    .build()
                                .build())
                             .build()}

connected

read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client#migrate")
                               .hashKey("client")
                               .header("sender-id", "sender-1")
                               .build()
                           .build()}
read zilla:data.empty

read closed
write close


accepted

read zilla:begin.ext ${asyncapi:matchBeginEx()
                             .typeId(zilla:id("asyncapi"))
                             .extension(kafka:matchBeginEx()
                                   .typeId(zilla:id("kafka"))
                                   .group()
                                       .groupId("client-session")
                                       .protocol("highlander")
                                       .timeout(1000)
                                       .build())
                               .build()}

connected

write advise zilla:flush ${kafka:flushEx()
                             .typeId(zilla:id("kafka"))
                             .group()
                                 .leaderId("consumer-1")
                                 .memberId("consumer-1")
                                 .members("consumer-1")
                                 .build()
                             .build()}
write flush

read zilla:data.empty


accepted

read zilla:begin.ext ${asyncapi:matchBeginEx()
                             .typeId(zilla:id("asyncapi"))
                             .extension(kafka:matchBeginEx()
                                .typeId(zilla:id("kafka"))
                                .merged()
                                    .capabilities("PRODUCE_AND_FETCH")
                                    .topic("mqtt-sessions")
                                    .groupId("mqtt-clients")
                                    .filter()
                                        .key("client")
                                        .build()
                                    .filter()
                                        .key("client#migrate")
                                        .headerNot("sender-id", "sender-1")
                                        .build()
                                    .build())
                            .build()}

connected

# will delivery cancellation signal for client
read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client#will-signal")
                               .hashKey("client")
                               .header("type", "will-signal")
                               .build()
                           .build()}
read zilla:data.null

# session expiry cancellation signal for client
read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client#expiry-signal")
                               .hashKey("client")
                               .header("type", "expiry-signal")
                               .build()
                           .build()}
read zilla:data.null

# session expire later signal for client
read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client#expiry-signal")
                               .hashKey("client")
                               .header("type", "expiry-signal")
                               .build()
                           .build()}
read ${mqtt:sessionSignal()
           .expiry()
               .instanceId("zilla-1")
               .clientId("client")
               .delay(1000)
               .expireAt(-1)
               .build()
           .build()}

write advise zilla:flush

read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client")
                               .build()
                           .build()}

read ${mqtt:session()
               .subscription("sensor/one", 1)
               .build()}

write zilla:data.ext ${kafka:dataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .fetch()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client")
                               .build()
                           .build()}
write ${mqtt:session()
               .subscription("sensor/one", 1)
               .build()}
write flush


accepted

read zilla:begin.ext ${asyncapi:matchBeginEx()
                             .typeId(zilla:id("asyncapi"))
                             .extension(kafka:matchBeginEx()
                                .typeId(zilla:id("kafka"))
                                .merged()
                                    .capabilities("FETCH_ONLY")
                                    .topic("mqtt-messages")
                                    .filter()
                                        .headers("zilla:filter")
                                            .sequence("sensor")
                                            .sequence("one")
                                            .build()
                                        .build()
                                    .evaluation("EAGER")
                                    .build())
                            .build()}

connected

write zilla:data.ext ${kafka:dataEx()
                            .typeId(zilla:id("kafka"))
                            .merged()
                              .fetch()
                                .timestamp(kafka:timestamp())
                                .filters(1)
                                .partition(0, 1, 2)
                                .progress(0, 2)
                                .progress(1, 1)
                                .key("sensor/one")
                                .header("zilla:filter", "sensor")
                                .header("zilla:filter", "one")
                                .header("zilla:local", "client")
                                .header("zilla:format", "TEXT")
                                .build()
                            .build()}

write "asyncapiMessage"
write flush


accepted

read zilla:begin.ext ${asyncapi:matchBeginEx()
                             .typeId(zilla:id("asyncapi"))
                             .extension(kafka:beginEx()
                                .typeId(zilla:id("kafka"))
                                .merged()
                                    .capabilities("PRODUCE_ONLY")
                                    .topic("mqtt-messages")
                                    .partition(-1, -2)
                                    .ackMode("NONE")
                                    .build())
                            .build()}


connected

read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("sensor/one")
                               .header("zilla:filter", "sensor")
                               .header("zilla:filter", "one")
                               .header("zilla:local", "client")
                               .headerInt("zilla:expiry", 15)
                               .header("zilla:content-type", "message")
                               .header("zilla:format", "TEXT")
                               .header("zilla:reply-to", "mqtt-messages")
                               .header("zilla:reply-key", "sensor/one")
                               .header("zilla:reply-filter", "sensor")
                               .header("zilla:reply-filter", "one")
                               .header("zilla:correlation-id", "info")
                               .header("zilla:qos", "0")
                               .build()
                           .build()}

read "asyncapiMessage"
