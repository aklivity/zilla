#
# Copyright 2021-2023 Aklivity Inc.
#
# Aklivity licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

accept "zilla://streams/asyncapi0"
        option zilla:window 8192
        option zilla:transmission "duplex"

accepted

read zilla:begin.ext ${asyncapi:beginEx()
                             .typeId(zilla:id("asyncapi"))
                             .extension(mqtt:beginEx()
                                            .typeId(zilla:id("mqtt"))
                                            .session()
                                              .flags("CLEAN_START")
                                              .clientId("client")
                                              .build()
                                            .build())
                             .build()}

write zilla:begin.ext ${asyncapi:beginEx()
                             .typeId(zilla:id("asyncapi"))
                             .extension(mqtt:beginEx()
                                            .typeId(zilla:id("mqtt"))
                                            .session()
                                              .flags("CLEAN_START")
                                              .qosMax(2)
                                              .packetSizeMax(66560)
                                              .capabilities("RETAIN", "WILDCARD", "SUBSCRIPTION_IDS", "SHARED_SUBSCRIPTIONS")
                                              .clientId("client")
                                              .build()
                                        .build())
                             .build()}

connected

write zilla:data.empty
write flush


accepted

read zilla:begin.ext ${asyncapi:beginEx()
                             .typeId(zilla:id("asyncapi"))
                             .extension(mqtt:beginEx()
                                              .typeId(zilla:id("mqtt"))
                                              .publish()
                                                .clientId("client")
                                                .topic("sensor/one")
                                                .build()
                                              .build())
                             .build()}

connected

read zilla:data.ext ${mqtt:dataEx()
                             .typeId(zilla:id("mqtt"))
                             .publish()
                                .qos("AT_MOST_ONCE")
                                .expiryInterval(15)
                                .contentType("message")
                                .format("TEXT")
                                .responseTopic("sensor/one")
                                .correlation("info")
                                .build()
                             .build()}
read "message"

