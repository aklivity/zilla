#
# Copyright 2021-2023 Aklivity Inc.
#
# Aklivity licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

connect "zilla://streams/asyncapi_mqtt0"
        option zilla:window 8192
        option zilla:transmission "duplex"

write zilla:begin.ext ${asyncapi:beginEx()
                             .typeId(zilla:id("asyncapi"))
                             .extension(mqtt:beginEx()
                                            .typeId(zilla:id("mqtt"))
                                            .session()
                                              .clientId("client")
                                              .build()
                                            .build())
                             .build()}

read zilla:begin.ext ${asyncapi:matchBeginEx()
                             .typeId(zilla:id("asyncapi"))
                             .extension(mqtt:beginEx()
                                            .typeId(zilla:id("mqtt"))
                                            .session()
                                              .subscribeQosMax(2)
                                              .capabilities("RETAIN", "SUBSCRIPTION_IDS", "WILDCARD")
                                              .clientId("client")
                                              .build()
                                            .build())
                             .build()}

connected

read zilla:data.empty

write zilla:data.ext ${mqtt:dataEx()
                             .typeId(zilla:id("mqtt"))
                             .session()
                                .kind("STATE")
                                .build()
                             .build()}
write ${mqtt:session()
               .subscription("sensor/one", 1)
               .build()}
write flush

read ${mqtt:session()
               .subscription("sensor/one", 1)
               .build()}
read notify RECEIVED_SESSION_STATE


connect await RECEIVED_SESSION_STATE
        "zilla://streams/asyncapi_mqtt0"
        option zilla:window 8192
        option zilla:transmission "duplex"

write zilla:begin.ext ${asyncapi:beginEx()
                             .typeId(zilla:id("asyncapi"))
                             .extension(mqtt:beginEx()
                                             .typeId(zilla:id("mqtt"))
                                             .subscribe()
                                                 .clientId("client")
                                                 .filter("sensor/two", 1, "AT_MOST_ONCE", "SEND_RETAINED")
                                                 .build()
                                             .build())
                             .build()}
connected

read zilla:data.ext ${mqtt:matchDataEx()
                             .typeId(zilla:id("mqtt"))
                             .publish()
                                .qos("AT_MOST_ONCE")
                                .expiryInterval(15)
                                .contentType("asyncapiMessage")
                                .format("TEXT")
                                .responseTopic("sensor/one")
                                .correlation("info")
                                .build()
                             .build()}
read "asyncapiMessage"


connect await RECEIVED_SESSION_STATE
        "zilla://streams/asyncapi_mqtt0"
        option zilla:window 8192
        option zilla:transmission "duplex"

write zilla:begin.ext ${asyncapi:beginEx()
                                   .typeId(zilla:id("asyncapi"))
                                   .extension(mqtt:beginEx()
                                                    .typeId(zilla:id("mqtt"))
                                                    .publish()
                                                      .clientId("client")
                                                      .topic("sensor/one")
                                                      .build()
                                                    .build())
                                   .build()}

connected

write zilla:data.ext ${mqtt:dataEx()
                             .typeId(zilla:id("mqtt"))
                             .publish()
                                .qos("AT_MOST_ONCE")
                                .expiryInterval(15)
                                .contentType("asyncapiMessage")
                                .format("TEXT")
                                .responseTopic("sensor/one")
                                .correlation("info")
                                .build()
                             .build()}
write "asyncapiMessage"
write flush

