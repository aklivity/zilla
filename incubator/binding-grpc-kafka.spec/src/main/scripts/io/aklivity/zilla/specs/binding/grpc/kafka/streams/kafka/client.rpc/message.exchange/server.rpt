#
# Copyright 2021-2022 Aklivity Inc
#
# Licensed under the Aklivity Community License (the "License"); you may not use
# this file except in compliance with the License.  You may obtain a copy of the
# License at
#
#   https://www.aklivity.io/aklivity-community-license/
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#

accept "zilla://streams/kafka0"
    option zilla:window 8192
    option zilla:transmission "duplex"

accepted

read zilla:begin.ext ${kafka:beginEx()
                            .typeId(zilla:id("kafka"))
                            .merged()
                                .capabilities("PRODUCE_ONLY")
                                .topic("items")
                                .partition(-1, -2)
                                .ackMode("LEADER_ONLY")
                                .build()
                            .build()}

connected

read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("92d0bf92-63e0-4cfc-ae73-71dee92d1544")
                               .header("service", "example.EchoService")
                               .header("method", "EchoClientStream")
                               .header("custom", "test")
                               .header("zilla:identity", "test")
                               .build()
                           .build()}
read ${grpc:protobuf()
           .string(1, "Hello World1")
           .build()}

read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("92d0bf92-63e0-4cfc-ae73-71dee92d1544")
                               .header("service", "example.EchoService")
                               .header("method", "EchoClientStream")
                               .header("custom", "test")
                               .header("zilla:identity", "test")
                               .build()
                           .build()}
read ${grpc:protobuf()
           .string(1, "Hello World2")
           .build()}

read closed
write close

accepted

read zilla:begin.ext ${kafka:beginEx()
                              .typeId(zilla:id("kafka"))
                              .merged()
                                  .capabilities("FETCH_ONLY")
                                  .topic("echo-replies")
                                  .partition(-1, -2)
                                  .filter()
                                    .header("zilla:correlation-id", "59410e57-3e0f-4b61-9328-f645a7968ac8-5d1dfda51f846bbd53ed6c92e633912b")
                                    .build()
                                  .build()
                              .build()}

connected

write zilla:data.ext ${kafka:dataEx()
                            .typeId(zilla:id("kafka"))
                            .merged()
                                .timestamp(kafka:timestamp())
                                .partition(0, 1, 2)
                                .progress(0, 2)
                                .progress(1, 1)
                                .key("92d0bf92-63e0-4cfc-ae73-71dee92d1544")
                                .header("service", "example.EchoService")
                                .header("method", "EchoClientStream")
                                .header("custom", "test")
                                .header("zilla:identity", "test")
                                .build()
                            .build()}
write ${grpc:protobuf()
            .string(1, "Hello World")
            .build()}
write flush

write close
read closed
