/*
 * Copyright 2021-2023 Aklivity Inc
 *
 * Licensed under the Aklivity Community License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at
 *
 *   https://www.aklivity.io/aklivity-community-license/
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */
scope protocol
{
    option byteorder network;

    scope codec
    {
        struct PgsqlSslRequest
        {
            int32 length = 4;
            int32 requestCode = 80877103;
        }

        struct PgsqlSslResponse
        {
            uint8 answer = 78;
        }

        struct PgsqlStartupMessage
        {
            int32 length;
            uint16 majorVersion;
            uint16 minorVersion;
        }

        enum PgsqlMessageKind (uint8)
        {
            TERMINATOR(88),
            PARAMETER_STATUS(83),
            BACKEND_KEY(75),
            AUTHENTICATION(82),
            QUERY (81),
            ROW (68),
            TYPE (84),
            COMPLETION (67),
            READY (90)
        }

        struct PgsqlAuthenticationMessage
        {
            PgsqlMessageKind kind = AUTHENTICATION;
            int32 length = 8;
            int32 type = 0;
        }

        struct PgsqlBackendKeyMessage
        {
            PgsqlMessageKind kind = BACKEND_KEY;
            int32 length = 12;
            int32 pid = 0;
            int32 key = 0;
        }

        struct PgsqlMessage
        {
            PgsqlMessageKind kind;
            int32 length;
        }

        struct PgsqlRowDescription
        {
            int32 tableOid;
            int16 index;
            int32 typeOid;
            int16 length;
            int32 modifier;
            int16 format;
        }
    }
}
