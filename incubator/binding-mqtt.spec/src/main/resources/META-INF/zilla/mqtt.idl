/*
 * Copyright 2021-2022 Aklivity Inc.
 *
 * Aklivity licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
scope mqtt
{
    enum MqttSubscribeFlags (uint8)
    {
        QOS0(0),
        QOS1(1),
        QOS2(2),
        SEND_RETAINED(3),
        RETAIN_AS_PUBLISHED(4),
        NO_LOCAL(5)
    }

    enum MqttPublishFlags (uint8)
    {
        QOS0(0),
        QOS1(1),
        QOS2(2),
        RETAIN(3)
    }

    enum MqttPayloadFormat
    {
        BINARY,
        TEXT
    }

    struct MqttBinary
    {
        int32 length;
        octets[length] bytes = null;
    }

    struct MqttUserProperty
    {
        string16 key;
        string16 value;
    }

    struct MqttTopicFilter
    {
        string16 pattern;
        varuint32 subscriptionId = 0;
        uint8 flags = 0;
    }

    scope stream
    {

        union MqttBeginEx switch (uint8) extends core::stream::Extension
        {
            case 1: mqtt::stream::MqttSubscribeBeginEx subscribe;
            case 0: kafka::stream::MqttProduceBeginEx produce;
        }

        struct MqttSubscribeBeginEx extends core::stream::Extension
        {
            string16 clientId;
            MqttTopicFilter[] filters;
            MqttUserProperty[] properties;
        }

        struct MqttProduceBeginEx extends core::stream::Extension
        {
            string16 clientId;
            string16 topic;
            uint8 flags = 0;
            MqttUserProperty[] properties;
        }

        //TODO: split MqttBeginEx to MqttProduceBeginEx and MqttSubscribeBeginEx, MqttSessionBeginEx - bidirectional (like kafka with union)
        //and adapt the tests. Remove MqttCapabilities
        //TODO: check if we need to split the others as well

        struct MqttDataEx extends core::stream::Extension
        {
            int32 deferred = 0;             // INIT only (TODO: move to DATA frame)
            string16 topic = null;
            uint8 flags = 0;
            int32 expiryInterval = -1;
            string16 contentType = null;
            MqttPayloadFormat format = BINARY;
            string16 responseTopic = null;
            MqttBinary correlation;
            MqttUserProperty[] properties;
        }

        struct MqttAbortEx extends core::stream::Extension
        {
            uint8 reason;
        }

        struct MqttFlushEx extends core::stream::Extension
        {
            MqttTopicFilter[] filters;
        }
    }
}
