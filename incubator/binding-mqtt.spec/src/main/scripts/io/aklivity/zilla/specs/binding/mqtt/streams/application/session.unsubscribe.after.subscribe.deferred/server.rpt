#
# Copyright 2021-2023 Aklivity Inc.
#
# Aklivity licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

accept "zilla://streams/app0"
        option zilla:window 8192
        option zilla:transmission "duplex"

accepted

read zilla:begin.ext ${mqtt:matchBeginEx()
                             .typeId(zilla:id("mqtt"))
                             .session()
                                .clientId("client")
                                .build()
                             .build()}
connected

write zilla:data.empty
write flush

read ${mqtt:session()
               .clientId("client")
               .subscription("sensor/one", 1)
               .subscription("sensor/two", 1)
               .build()}

read await UNSUBSCRIBE_ALL_FILTERS
write ${mqtt:session()
               .clientId("client")
               .subscription("sensor/one", 1)
               .subscription("sensor/two", 1)
               .build()}
write flush

read ${mqtt:session()
               .clientId("client")
               .build()}

write ${mqtt:session()
               .clientId("client")
               .build()}
write flush


accepted

read zilla:begin.ext ${mqtt:matchBeginEx()
                             .typeId(zilla:id("mqtt"))
                             .subscribe()
                                .clientId("client")
                                .filter("sensor/one", 1)
                                .filter("sensor/two", 1)
                                .build()
                             .build()}

connected

read advised zilla:flush ${mqtt:flushEx()
                                 .typeId(zilla:id("mqtt"))
                                 .subscribe()
                                    .filter("sensor/two", 1)
                                    .build()
                                 .build()}

read closed
write close
