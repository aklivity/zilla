#
# Copyright 2021-2022 Aklivity Inc.
#
# Aklivity licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

connect "zilla://streams/app0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${mqtt:beginEx()
                              .typeId(zilla:id("mqtt"))
                              .subscribe()
                                .clientId("client")
                                .filter("sensor/one", 1, "NO_LOCAL", "SEND_RETAINED")
                                .build()
                              .build()}

connected

read zilla:data.ext ${mqtt:dataEx()
                             .typeId(zilla:id("mqtt"))
                             .subscribe()
                                 .topic("sensor/one")
                                 .subscriptionId(1)
                                 .expiryInterval(15)
                                 .contentType("message")
                                 .format("TEXT")
                                 .build()
                             .build()}
read "message2"

write notify SUBSCRIBED


connect await SUBSCRIBED
        "zilla://streams/app0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${mqtt:beginEx()
                             .typeId(zilla:id("mqtt"))
                             .publish()
                                .clientId("client")
                                .topic("sensor/one")
                                .build()
                             .build()}

connected

write zilla:data.ext ${mqtt:dataEx()
                             .typeId(zilla:id("mqtt"))
                             .publish()
                                .topic("sensor/one")
                                .expiryInterval(15)
                                .format("TEXT")
                                .build()
                             .build()}
write "message"
