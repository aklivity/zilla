#
# Copyright 2021-2022 Aklivity Inc.
#
# Aklivity licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

connect "zilla://streams/app0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${mqtt:beginEx()
                             .typeId(zilla:id("mqtt"))
                             .session()
                                .clientId("one")
                                .pattern("$SYS/sessions/one/#")
                                .build()
                             .build()}

connected

write zilla:data.ext ${mqtt:dataEx()
                            .typeId(zilla:id("mqtt"))
                            .session()
                                .topic("$SYS/sessions/one/will")
                                .build()
                            .build()}

write "client one session expired"
write flush

write close
write notify FIRST_SESSION


connect await FIRST_SESSION
        "zilla://streams/app0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${mqtt:beginEx()
                             .typeId(zilla:id("mqtt"))
                             .session()
                                .clientId("client")
                                .pattern("$SYS/sessions/client/#")
                                .build()
                             .build()}

connected

write notify SECOND_SESSION


connect await SECOND_SESSION
        "zilla://streams/app0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${mqtt:beginEx()
                             .typeId(zilla:id("mqtt"))
                             .subscribe()
                                .clientId("one")
                                .filter("wills/one", 1, "SEND_RETAINED")
                                .build()
                             .build()}

connected

read zilla:data.ext ${mqtt:dataEx()
                             .typeId(zilla:id("mqtt"))
                             .subscribe()
                                 .topic("wills/one")
                                 .format("TEXT")
                                 .build()
                             .build()}

read "client one session expired"
write notify SUBSCRIBE

connect await SUBSCRIBE
        "zilla://streams/app0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${mqtt:beginEx()
                             .typeId(zilla:id("mqtt"))
                             .publish()
                                 .clientId("one")
                                 .topic("wills/one")
                                 .build()
                             .build()}

connected

write zilla:data.ext ${mqtt:dataEx()
                            .typeId(zilla:id("mqtt"))
                            .publish()
                                .topic("wills/one")
                                .format("TEXT")
                                .build()
                            .build()}

write "client one session expired"
