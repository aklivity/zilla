#
# Copyright 2021-2023 Aklivity Inc
#
# Licensed under the Aklivity Community License (the "License"); you may not use
# this file except in compliance with the License.  You may obtain a copy of the
# License at
#
#   https://www.aklivity.io/aklivity-community-license/
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#

accept "zilla://streams/app1"
    option zilla:window 8192
    option zilla:transmission "duplex"

accepted

read zilla:begin.ext ${pgsql:beginEx()
                              .typeId(zilla:id("pgsql"))
                              .parameter("user", "root")
                              .parameter("database", "dev")
                              .parameter("application_name", "psql")
                              .parameter("client_encoding", "UTF8")
                              .build()}

connected

read await CREATE_TOPIC_COMPLETED

read zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
read "CREATE SOURCE IF NOT EXISTS weather_source (*)\n"
     "WITH (\n"
     "   connector='kafka',\n"
     "   properties.bootstrap.server='localhost:9092',\n"
     "   topic='dev.weather',\n"
     "   scan.startup.mode='latest',\n"
     "   scan.startup.timestamp.millis='140000000'\n"
     ") FORMAT PLAIN ENCODE AVRO (\n"
     "   schema.registry = 'http://localhost:8081'\n"
     ");"
     [0x00]

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("CREATE_SOURCE")
                                .build()
                              .build()}

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

read zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
read "CREATE MATERIALIZED VIEW weather_view AS SELECT * FROM weather_source;"
     [0x00]

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("CREATE_MATERIALIZED_VIEW")
                                .build()
                              .build()}

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

read zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
read "CREATE TABLE weather(\n"
      "city VARCHAR, temperature DOUBLE, date DATE,\n
      "PRIMARY KEY (city, temperature, date)"
      ")"
     [0x00]

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("CREATE_TABLE")
                                .build()
                              .build()}

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

read zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
read "CREATE SINK weather_view_sink INTO weather FROM weather_view;"
     [0x00]

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("CREATE_SINK")
                                .build()
                              .build()}

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

read zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
read "CREATE SINK weather_sink\n"
     "FROM weather\n"
     "WITH (\n"
     "    connector='kafka',\n"
     "    topic='dev.weather',\n"
     "    properties.bootstrap.server='localhost:9092',\n"
     ") FORMAT PLAIN ENCODE AVRO (\n"
     "   schema.registry = 'http://localhost:8081',\n"
     "    force_append_only='true'\n"
     ");"
     [0x00]

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("CREATE_SINK")
                                .build()
                              .build()}

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}


accept "zilla://streams/app2"
    option zilla:window 8192
    option zilla:transmission "duplex"

accepted

read zilla:begin.ext ${pgsql:beginEx()
                              .typeId(zilla:id("pgsql"))
                              .parameter("user", "root")
                              .parameter("database", "dev")
                              .parameter("application_name", "psql")
                              .parameter("client_encoding", "UTF8")
                              .build()}

connected

read zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
read "CREATE TOPIC IF NOT EXISTS weather "
     "(city VARCHAR, temperature DOUBLE, date DATE);"
     [0x00]

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("CREATE_TOPIC")
                                .build()
                              .build()}

write notify CREATE_TOPIC_COMPLETED

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

