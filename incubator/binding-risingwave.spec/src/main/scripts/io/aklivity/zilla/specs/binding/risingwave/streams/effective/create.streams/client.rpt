#
# Copyright 2021-2024 Aklivity Inc
#
# Licensed under the Aklivity Community License (the "License"); you may not use
# this file except in compliance with the License.  You may obtain a copy of the
# License at
#
#   https://www.aklivity.io/aklivity-community-license/
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#

connect "zilla://streams/app1"
    option zilla:window 8192
    option zilla:transmission "duplex"

write zilla:begin.ext ${pgsql:beginEx()
                              .typeId(zilla:id("pgsql"))
                              .parameter("user", "zillabase")
                              .parameter("database", "dev")
                              .parameter("application_name", "psql")
                              .parameter("client_encoding", "UTF8")
                              .build()}

connected

connect "zilla://streams/app1"
    option zilla:window 8192
    option zilla:transmission "duplex"

write zilla:begin.ext ${pgsql:beginEx()
                              .typeId(zilla:id("pgsql"))
                              .parameter("user", "root")
                              .parameter("database", "dev")
                              .parameter("application_name", "psql")
                              .parameter("client_encoding", "UTF8")
                              .build()}

connected

write zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
write "CREATE SOURCE IF NOT EXISTS weather_c (*)\n"
      "WITH (\n"
      "   connector='kafka',\n"
      "   properties.bootstrap.server='localhost:9092',\n"
      "   topic='dev.weather_c',\n"
      "   scan.startup.mode='latest',\n"
      "   scan.startup.timestamp.millis='140000000'\n"
      ") FORMAT PLAIN ENCODE AVRO (\n"
      "   schema.registry = 'http://localhost:8081'\n"
      ");"
      [0x00]
write flush

read advised zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("CREATE_SOURCE")
                                .build()
                              .build()}

read advised zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

write zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
write "CREATE SOURCE IF NOT EXISTS weather_f (*)\n"
      "WITH (\n"
      "   connector='kafka',\n"
      "   properties.bootstrap.server='localhost:9092',\n"
      "   topic='dev.weather_f',\n"
      "   scan.startup.mode='latest',\n"
      "   scan.startup.timestamp.millis='140000000'\n"
      ") FORMAT PLAIN ENCODE AVRO (\n"
      "   schema.registry = 'http://localhost:8081'\n"
      ");"
      [0x00]
write flush

read advised zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("CREATE_SOURCE")
                                .build()
                              .build()}

read advised zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

connect "zilla://streams/app2"
    option zilla:window 8192
    option zilla:transmission "duplex"

write zilla:begin.ext ${pgsql:beginEx()
                              .typeId(zilla:id("pgsql"))
                              .parameter("user", "root")
                              .parameter("database", "dev")
                              .parameter("application_name", "psql")
                              .parameter("client_encoding", "UTF8")
                              .build()}

connected

write zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
write "CREATE TOPIC IF NOT EXISTS weather_c "
      "(city VARCHAR, temperature DOUBLE, date DATE);"
      [0x00]

write flush

read advised zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("CREATE_TOPIC")
                                .build()
                              .build()}

read advised zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}


write zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
write "CREATE TOPIC IF NOT EXISTS weather_f "
      "(city VARCHAR, temperature DOUBLE, date DATE);"
      [0x00]

write flush

read advised zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("CREATE_TOPIC")
                                .build()
                              .build()}

read advised zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}
