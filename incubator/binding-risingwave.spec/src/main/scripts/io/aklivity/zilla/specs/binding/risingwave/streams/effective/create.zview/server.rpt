#
# Copyright 2021-2024 Aklivity Inc
#
# Licensed under the Aklivity Community License (the "License"); you may not use
# this file except in compliance with the License.  You may obtain a copy of the
# License at
#
#   https://www.aklivity.io/aklivity-community-license/
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#

accept "zilla://streams/app1"
    option zilla:window 8192
    option zilla:transmission "duplex"

accepted

read zilla:begin.ext ${pgsql:beginEx()
                              .typeId(zilla:id("pgsql"))
                              .parameter("user", "zillabase")
                              .parameter("database", "dev")
                              .parameter("application_name", "psql")
                              .parameter("client_encoding", "UTF8")
                              .build()}

connected

read zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
read "CREATE MATERIALIZED VIEW IF NOT EXISTS distinct_cities "
     "AS SELECT id, city FROM weather GROUP BY city;"
     [0x00]

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("CREATE_MATERIALIZED_VIEW")
                                .build()
                              .build()}

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

read zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
read "DESCRIBE distinct_cities;"
      [0x00]

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .type()
                                .column()
                                    .name("Name")
                                    .tableOid(0)
                                    .index(0)
                                    .typeOid(1043)
                                    .length(2)
                                    .modifier(-1)
                                    .format("TEXT")
                                    .build()
                                .column()
                                    .name("Type")
                                    .tableOid(0)
                                    .index(0)
                                    .typeOid(1043)
                                    .length(4)
                                    .modifier(-1)
                                    .format("TEXT")
                                    .build()
                                .column()
                                    .name("Is Hidden")
                                    .tableOid(0)
                                    .index(0)
                                    .typeOid(1043)
                                    .length(4)
                                    .modifier(-1)
                                    .format("TEXT")
                                    .build()
                                .column()
                                    .name("Description")
                                    .tableOid(0)
                                    .index(0)
                                    .typeOid(1043)
                                    .length(4)
                                    .modifier(-1)
                                    .format("TEXT")
                                    .build()
                                .build()
                              .build()}

write flush

write zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .row()
                                .build()
                              .build()}
write [0x00 0x04]                                  # Field Count
      [0x00 0x00 0x00 0x02]                        # Length
      "id"                                         # Data
      [0x00 0x00 0x00 0x11]                        # Length
      "character varying"                          # Data
      [0x00 0x00 0x00 0x05]                        # Length
      "false"                                      # Data
      [0xff 0xff 0xff 0xff]                        # Length

write flush

write zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .row()
                                .build()
                              .build()}
write  [0x00 0x04]                                 # Field Count
       [0x00 0x00 0x00 0x04]                       # Length
       "city"                                      # Data
       [0x00 0x00 0x00 0x11]                       # Length
       "character varying"                         # Data
       [0x00 0x00 0x00 0x05]                       # Length
       "false"                                     # Data
       [0xff 0xff 0xff 0xff]                       # Length
write flush

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("DESCRIBE")
                                .build()
                              .build()}

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

read zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
read "CREATE SINK zb_catalog.distinct_cities_sink\n"
     "FROM distinct_cities\n"
     "WITH (\n"
     "   connector='kafka',\n"
     "   properties.bootstrap.server='localhost:9092',\n"
     "   topic='public.distinct_cities',\n"
     "   primary_key='id'\n"
     ") FORMAT UPSERT ENCODE AVRO (\n"
     "   schema.registry='http://localhost:8081'\n"
     ") KEY ENCODE TEXT;"
     [0x00]

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("CREATE_SINK")
                                .build()
                              .build()}

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

read zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
read "INSERT INTO zb_catalog.zviews (name, sql) VALUES "
      "('distinct_cities', 'CREATE MATERIALIZED VIEW IF NOT EXISTS distinct_cities AS SELECT id, city FROM weather GROUP BY city;"
     [0x00]
      "');"
     [0x00]

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("INSERT 0 2")
                                .build()
                              .build()}

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

accepted


read zilla:begin.ext ${pgsql:beginEx()
                              .typeId(zilla:id("pgsql"))
                              .parameter("user", "app")
                              .parameter("database", "dev")
                              .parameter("application_name", "psql")
                              .parameter("client_encoding", "UTF8")
                              .build()}

connected

accept "zilla://streams/app2"
    option zilla:window 8192
    option zilla:transmission "duplex"

accepted

read zilla:begin.ext ${pgsql:beginEx()
                              .typeId(zilla:id("pgsql"))
                              .parameter("user", "app")
                              .parameter("database", "dev")
                              .parameter("application_name", "psql")
                              .parameter("client_encoding", "UTF8")
                              .build()}

connected

read zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
read  "CREATE TOPIC IF NOT EXISTS distinct_cities "
      "(id VARCHAR, city VARCHAR, PRIMARY KEY (id, city));"
     [0x00]

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("CREATE_TOPIC")
                                .build()
                              .build()}


write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}
