#
# Copyright 2021-2024 Aklivity Inc
#
# Licensed under the Aklivity Community License (the "License"); you may not use
# this file except in compliance with the License.  You may obtain a copy of the
# License at
#
#   https://www.aklivity.io/aklivity-community-license/
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#

connect "zilla://streams/app1"
    option zilla:window 8192
    option zilla:transmission "duplex"

write zilla:begin.ext ${pgsql:beginEx()
                              .typeId(zilla:id("pgsql"))
                              .parameter("user", "postgres")
                              .parameter("database", "dev")
                              .parameter("application_name", "psql")
                              .parameter("client_encoding", "UTF8")
                              .build()}

connected

write zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
write "SELECT name FROM zb_catalog.ztables;"
write [0x00]

read advised zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .type()
                                .column()
                                    .name("name")
                                    .tableOid(0)
                                    .index(0)
                                    .typeOid(1043)
                                    .length(8)
                                    .modifier(-1)
                                    .format("TEXT")
                                    .build()
                                .build()
                              .build()}

read zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .row()
                                .build()
                              .build()}
read [0x00 0x02]                                                 # Field Count
     [0x00 0x00 0x00 0x0f]                                       # Length
     "distinct_cities"                                           # Data
     [0x00]

read advised zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("SELECT 1")
                                .build()
                              .build()}

read advised zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

write zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
write "SHOW TABLES;"
      [0x00]

read advised zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .type()
                                .column()
                                    .name("Name")
                                    .tableOid(0)
                                    .index(0)
                                    .typeOid(1043)
                                    .length(4)
                                    .modifier(-1)
                                    .format("TEXT")
                                    .build()
                                .build()
                              .build()}

read zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .row()
                                .build()
                              .build()}
read [0x00 0x01]                               # Field Count
     [0x00 0x00 0x00 0x06]                     # Length
     "cities"                                  # Data

read zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .row()
                                .build()
                              .build()}
read [0x00 0x01]                               # Field Count
     [0x00 0x00 0x00 0x0f]                     # Length
     "distinct_cities"                         # Data

read advised zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("SHOW_COMMAND")
                                .build()
                              .build()}

read advised zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

connect "zilla://streams/app1"
    option zilla:window 8192
    option zilla:transmission "duplex"

write zilla:begin.ext ${pgsql:beginEx()
                              .typeId(zilla:id("pgsql"))
                              .parameter("user", "zillabase")
                              .parameter("database", "dev")
                              .parameter("application_name", "psql")
                              .parameter("client_encoding", "UTF8")
                              .build()}

connected
