#
# Copyright 2021-2024 Aklivity Inc
#
# Licensed under the Aklivity Community License (the "License"); you may not use
# this file except in compliance with the License.  You may obtain a copy of the
# License at
#
#   https://www.aklivity.io/aklivity-community-license/
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#

accept "zilla://streams/app1"
    option zilla:window 8192
    option zilla:transmission "duplex"

accepted

read zilla:begin.ext ${pgsql:beginEx()
                              .typeId(zilla:id("pgsql"))
                              .parameter("user", "postgres")
                              .parameter("database", "dev")
                              .parameter("application_name", "psql")
                              .parameter("client_encoding", "UTF8")
                              .build()}

connected

read zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
read "SELECT * FROM zb_catalog.zfunctions;"
read [0x00]

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .type()
                                .column()
                                    .name("name")
                                    .tableOid(0)
                                    .index(0)
                                    .typeOid(701)
                                    .length(8)
                                    .modifier(-1)
                                    .format("TEXT")
                                    .build()
                                .column()
                                    .name("sql")
                                    .tableOid(0)
                                    .index(0)
                                    .typeOid(20)
                                    .length(3)
                                    .modifier(-1)
                                    .format("TEXT")
                                    .build()
                                .build()
                              .build()}

write zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .row()
                                .build()
                              .build()}
write [0x00 0x02]                                                 # Field Count
      [0x00 0x00 0x00 0x06]                                       # Length
      [0x63 0x69 0x74 0x69 0x65 0x73]                             # Data
      [0x00 0x00 0x01 0x99]                                       # Length
      "CREATE ZFUNCTION send_payment(\n"
      " user_id VARCHAR,\n"
      " amount DOUBLE PRECISION)\n"
      "RETURNS TABLE(\n"
      " event VARCHAR,\n"
      " user_id VARCHAR,\n"
      " amount DOUBLE PRECISION)\n"
      "LANGUAGE SQL AS $$\n"
      " SELECT\n"
      "     CASE\n"
      "         WHEN balance >= args.amount THEN 'PaymentSent'\n"
      "         ELSE 'PaymentDeclined'\n"
      "     END AS event,\n"
      "     args.user_id,\n"
      "     args.amount\n"
      " FROM balance WHERE user_id = args.user_id;\n"
      "$$\n"
      "WITH (\n"
      " EVENTS = 'app_events'\n"
      ");"
      [0x00]

write flush


write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("SELECT 1")
                                .build()
                              .build()}

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

accepted

read zilla:begin.ext ${pgsql:beginEx()
                              .typeId(zilla:id("pgsql"))
                              .parameter("user", "zillabase")
                              .parameter("database", "dev")
                              .parameter("application_name", "psql")
                              .parameter("client_encoding", "UTF8")
                              .build()}

connected

