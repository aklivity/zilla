#
# Copyright 2021-2024 Aklivity Inc
#
# Licensed under the Aklivity Community License (the "License"); you may not use
# this file except in compliance with the License.  You may obtain a copy of the
# License at
#
#   https://www.aklivity.io/aklivity-community-license/
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#

connect "zilla://streams/app1"
    option zilla:window 8192
    option zilla:transmission "duplex"

write zilla:begin.ext ${pgsql:beginEx()
                              .typeId(zilla:id("pgsql"))
                              .parameter("user", "postgres")
                              .parameter("database", "dev")
                              .parameter("application_name", "psql")
                              .parameter("client_encoding", "UTF8")
                              .build()}

connected

write zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
write "INSERT INTO zb_catalog.zfunctions (name, sql) VALUES ('send_payment_handler', 'CREATE ZFUNCTION send_payment_handler(\n"
      " type VARCHAR,\n"
      " user_id VARCHAR,\n"
      " random VARCHAR,\n"
      " amount DOUBLE PRECISION,\n"
      " notes VARCHAR)\n"
      "RETURNS TABLE(\n"
      " type VARCHAR,\n"
      " user_id VARCHAR,\n"
      " request_id VARCHAR,\n"
      " amount DOUBLE PRECISION,\n"
      " notes VARCHAR)\n"
      "LANGUAGE SQL AS $$\n"
      " SELECT\n"
      "     CASE\n"
      "         WHEN balance >= amount THEN \"PaymentSent\"\n"
      "         ELSE \"PaymentDeclined\"\n"
      "     END AS type,\n"
      "     user_id,\n"
      "     request_id,\n"
      "     amount,\n"
      "     balance,\n"
      "     notes\n"
      " FROM balance as b WHERE b.user_id = user_id;\n"
      "$$');"
      [0x00]

write flush

read advised zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("INSERT 0 2")
                                .build()
                              .build()}

read advised zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

connect "zilla://streams/app1"
    option zilla:window 8192
    option zilla:transmission "duplex"

write zilla:begin.ext ${pgsql:beginEx()
                              .typeId(zilla:id("pgsql"))
                              .parameter("user", "zillabase")
                              .parameter("database", "dev")
                              .parameter("application_name", "psql")
                              .parameter("client_encoding", "UTF8")
                              .build()}

connected
