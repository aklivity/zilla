#
# Copyright 2021-2024 Aklivity Inc
#
# Licensed under the Aklivity Community License (the "License"); you may not use
# this file except in compliance with the License.  You may obtain a copy of the
# License at
#
#   https://www.aklivity.io/aklivity-community-license/
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#

connect "zilla://streams/app1"
    option zilla:window 8192
    option zilla:transmission "duplex"

write zilla:begin.ext ${pgsql:beginEx()
                              .typeId(zilla:id("pgsql"))
                              .parameter("user", "zillabase")
                              .parameter("database", "dev")
                              .parameter("application_name", "psql")
                              .parameter("client_encoding", "UTF8")
                              .build()}

connected

write zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
write "DROP SINK zb_catalog.weather_sink;"
      [0x00]
write flush

read advised zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("DROP_SINK")
                                .build()
                              .build()}

read advised zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

write zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
write "DROP SINK zb_catalog.weather_view_sink;"
      [0x00]
write flush

read advised zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("DROP_SINK")
                                .build()
                              .build()}

read advised zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

write zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
write "DROP TABLE weather;"
     [0x00]
write flush

read advised zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("DROP_TABLE")
                                .build()
                              .build()}

read advised zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

write zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
write "DELETE FROM zb_catalog.ztables WHERE name = 'weather';"
      [0x00]
write flush

read advised zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("DELETE 0 1")
                                .build()
                              .build()}

read advised zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

write zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
write "DROP MATERIALIZED VIEW weather_view;"
      [0x00]
write flush

read advised zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("DROP_MATERIALIZED_VIEW")
                                .build()
                              .build()}

read advised zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

write zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
write "DROP SOURCE weather_source;"
      [0x00]
write flush

read advised zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("DROP_SOURCE")
                                .build()
                              .build()}

read advised zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

connect "zilla://streams/app1"
    option zilla:window 8192
    option zilla:transmission "duplex"

write zilla:begin.ext ${pgsql:beginEx()
                              .typeId(zilla:id("pgsql"))
                              .parameter("user", "app")
                              .parameter("database", "dev")
                              .parameter("application_name", "psql")
                              .parameter("client_encoding", "UTF8")
                              .build()}

connected

connect "zilla://streams/app2"
    option zilla:window 8192
    option zilla:transmission "duplex"

write zilla:begin.ext ${pgsql:beginEx()
                              .typeId(zilla:id("pgsql"))
                              .parameter("user", "app")
                              .parameter("database", "dev")
                              .parameter("application_name", "psql")
                              .parameter("client_encoding", "UTF8")
                              .build()}

connected

write zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
write "DROP TOPIC weather;"
      [0x00]
write flush

read advised zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("DROP_TOPIC")
                                .build()
                              .build()}

read advised zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}
