#
# Copyright 2021-2024 Aklivity Inc
#
# Licensed under the Aklivity Community License (the "License"); you may not use
# this file except in compliance with the License.  You may obtain a copy of the
# License at
#
#   https://www.aklivity.io/aklivity-community-license/
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#

accept "zilla://streams/app1"
    option zilla:window 8192
    option zilla:transmission "duplex"

accepted

read zilla:begin.ext ${pgsql:beginEx()
                              .typeId(zilla:id("pgsql"))
                              .parameter("user", "postgres")
                              .parameter("database", "dev")
                              .parameter("application_name", "psql")
                              .parameter("client_encoding", "UTF8")
                              .build()}

connected

read zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
read "SELECT * FROM zb_catalog.zfunctions WHERE sql IN ('send_payment_handler');"
     [0x00]

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .type()
                                .column()
                                    .name("name")
                                    .tableOid(0)
                                    .index(0)
                                    .typeOid(701)
                                    .length(8)
                                    .modifier(-1)
                                    .format("TEXT")
                                    .build()
                                .column()
                                    .name("sql")
                                    .tableOid(0)
                                    .index(0)
                                    .typeOid(20)
                                    .length(3)
                                    .modifier(-1)
                                    .format("TEXT")
                                    .build()
                                .build()
                              .build()}

write zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .row()
                                .build()
                              .build()}
write [0x00 0x02]                                                 # Field Count
      [0x00 0x00 0x00 0x06]                                       # Length
      [0x63 0x69 0x74 0x69 0x65 0x73]                             # Data
      [0x00 0x00 0x01 0x73]                                       # Length
      "CREATE ZFUNCTION send_payment_handler(\n"                  # Data
      " user_id VARCHAR,\n"
      " amount DOUBLE PRECISION\n"
      "RETURNS TABLE(\n"
      " event VARCHAR,\n"
      " user_id VARCHAR,\n"
      " amount DOUBLE PRECISION)\n"
      "LANGUAGE SQL AS $$\n"
      " SELECT\n"
      "     CASE\n"
      "         WHEN balance >= amount THEN \"PaymentSent\"\n"
      "         ELSE \"PaymentDeclined\"\n"
      "     END AS event,\n"
      "     user_id,\n"
      "     amount,\n"
      " FROM balance as b WHERE b.user_id = user_id;\n"
      "$$"
      [0x00]

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("SELECT 1")
                                .build()
                              .build()}

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

read await CREATE_TOPIC_COMPLETED

read zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
read "CREATE SOURCE IF NOT EXISTS app_events_commands (*)\n"
     "INCLUDE header 'zilla:correlation-id' VARCHAR AS correlation_id\n"
     "INCLUDE header 'zilla:identity' VARCHAR AS owner_id\n"
     "INCLUDE timestamp AS created_at\n"
     "WITH (\n"
     "   connector='kafka',\n"
     "   properties.bootstrap.server='localhost:9092',\n"
     "   topic='app_events_commands',\n"
     "   scan.startup.mode='latest',\n"
     "   scan.startup.timestamp.millis='140000000'\n"
     ") FORMAT PLAIN ENCODE AVRO (\n"
     "   schema.registry = 'http://localhost:8081'\n"
     ");"
     [0x00]

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("CREATE_SOURCE")
                                .build()
                              .build()}

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

read zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
read "CREATE MATERIALIZED VIEW send_payment_handler AS\n"
     "   SELECT\n"
     "       c.correlation_id,\n"
     "       CASE\n"
     "           WHEN b.balance >= c.amount THEN 'PaymentSent'\n"
     "           ELSE 'PaymentDeclined'\n"
     "       END AS event,\n"
     "       c.user_id,\n"
     "       c.amount\n"
     "   FROM streampay_events_commands c\n"
     "   JOIN streampay_balances b\n"
     "   ON c.user_id = b.user_id\n"
     "   WHERE c.type = 'SendPayment';
     [0x00]

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("CREATE_MATERIALIZED_VIEW")
                                .build()
                              .build()}

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

read zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
read "CREATE MATERIALIZED VIEW app_events AS\n"
     "   SELECT * FROM send_payment_handler;"
     [0x00]

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("CREATE_MATERIALIZED_VIEW")
                                .build()
                              .build()}

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

read zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
read "GRANT ALL PRIVILEGES ON MATERIALIZED VIEW public.app_events TO zillabase;"
     [0x00]

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("GRANT_PRIVILEGES")
                                .build()
                              .build()}

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

read zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
read "CREATE MATERIALIZED VIEW app_events_reply_handler AS\n"
     "    SELECT\n"
     "         '200' AS status,\n"
     "         correlation_id\n"
     "    FROM app_events;"
     [0x00]

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("CREATE_MATERIALIZED_VIEW")
                                .build()
                              .build()}

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

read zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
read "CREATE SINK IF NOT EXISTS app_events_replies_sink\n"
     "AS SELECT\n"
     "      COALESCE(r.status, '400') AS status,\n"
     "      c.correlation_id\n"
     "  FROM streampay_events_commands c\n"
     "  LEFT JOIN app_events_reply_handler r\n"
     "  ON c.correlation_id = r.correlation_id\n"
     "WITH (\n"
     "    connector = 'kafka',\n"
     "    topic = 'public.app_events_replies',\n"
     "    properties.bootstrap.server = 'localhost:9092',\n"
     ") FORMAT PLAIN ENCODE AVRO (\n"
     "  force_append_only='true',\n"
     "  schema.registry = 'http://localhost:8081'\n"
     ");
     [0x00]

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("CREATE_SINK")
                                .build()
                              .build()}

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

accepted

read zilla:begin.ext ${pgsql:beginEx()
                              .typeId(zilla:id("pgsql"))
                              .parameter("user", "zillabase")
                              .parameter("database", "dev")
                              .parameter("application_name", "psql")
                              .parameter("client_encoding", "UTF8")
                              .build()}

connected

accept "zilla://streams/app2"
    option zilla:window 8192
    option zilla:transmission "duplex"

accepted

read zilla:begin.ext ${pgsql:beginEx()
                              .typeId(zilla:id("pgsql"))
                              .parameter("user", "postgres")
                              .parameter("database", "dev")
                              .parameter("application_name", "psql")
                              .parameter("client_encoding", "UTF8")
                              .build()}

connected

read zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
read "CREATE TOPIC IF NOT EXISTS app_events_commands "
     "(user_id VARCHAR, amount DOUBLE PRECISION);"
     [0x00]

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("CREATE_TOPIC")
                                .build()
                              .build()}

write notify CREATE_TOPIC_COMPLETED

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

read zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
read "CREATE TOPIC IF NOT EXISTS app_events_replies_sink "
     "(status VARCHAR, correlation_id VARCHAR);"
     [0x00]

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("CREATE_TOPIC")
                                .build()
                              .build()}

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}
