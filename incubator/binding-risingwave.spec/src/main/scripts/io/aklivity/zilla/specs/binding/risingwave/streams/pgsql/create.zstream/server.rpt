#
# Copyright 2021-2024 Aklivity Inc
#
# Licensed under the Aklivity Community License (the "License"); you may not use
# this file except in compliance with the License.  You may obtain a copy of the
# License at
#
#   https://www.aklivity.io/aklivity-community-license/
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#

property serverAddress "zilla://streams/app0"

accept ${serverAddress}
    option zilla:window 8192
    option zilla:transmission "duplex"

accepted

read zilla:begin.ext ${pgsql:beginEx()
                              .typeId(zilla:id("pgsql"))
                              .parameter("user", "zillabase")
                              .parameter("database", "dev")
                              .parameter("application_name", "psql")
                              .parameter("client_encoding", "UTF8")
                              .build()}

connected

read zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
read "CREATE ZSTREAM app_events (\n"
     "    event VARCHAR,\n"
     "    user_id VARCHAR,\n"
     "    amount DOUBLE PRECISION,\n"
     "    owner_id VARCHAR GENERATED ALWAYS AS IDENTITY,\n"
     "    created_at TIMESTAMP GENERATED ALWAYS AS NOW\n"
     ")\n"
     "WITH (\n"
     "    DISPATCH_ON = 'command',\n"
     "    HANDLERS = (\n"
     "        'SendPayment' TO 'send_payment_handler'\n"
     "    )\n"
     ");"
     [0x00]

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("CREATE_ZSTREAM")
                                .build()
                              .build()}

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}
