#
# Copyright 2021-2023 Aklivity Inc
#
# Licensed under the Aklivity Community License (the "License"); you may not use
# this file except in compliance with the License.  You may obtain a copy of the
# License at
#
#   https://www.aklivity.io/aklivity-community-license/
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#

accept "zilla://streams/app0"
    option zilla:window 8192
    option zilla:transmission "duplex"

accepted

read zilla:begin.ext ${pgsql:beginEx()
                              .typeId(zilla:id("pgsql"))
                              .parameter("user", "root")
                              .parameter("database", "dev")
                              .parameter("application_name", "psql")
                              .parameter("client_encoding", "UTF8")
                              .build()}

connected

read zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
write "CREATE TOPIC IF NOT EXISTS active_users "
      "(balance VARCHAR, status VARCHAR, user_id VARCHAR);"
      [0x00]

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("CREATE_TOPIC")
                                .build()
                              .build()}

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}


write close
read closed

accept "zilla://streams/app1"
    option zilla:window 8192
    option zilla:transmission "duplex"

accepted

read zilla:begin.ext ${pgsql:beginEx()
                              .typeId(zilla:id("pgsql"))
                              .parameter("user", "root")
                              .parameter("database", "dev")
                              .parameter("application_name", "psql")
                              .parameter("client_encoding", "UTF8")
                              .build()}

connected

read zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
read "CREATE MATERIALIZED VIEW IF NOT EXISTS active_users"
      "SELECT * FROM users WHERE status = 'active';"
      [0x00]

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("CREATE_MATERIALIZED_VIEW") #TODO: double check
                                .build()
                              .build()}

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

read zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
read "DESCRIBE MATERIALIZED VIEW active_users;"
      [0x00]

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .type()
                                .column()
                                    .name("balance")
                                    .tableOid(0)
                                    .index(0)
                                    .typeOid(701)
                                    .length(8)
                                    .modifier(-1)
                                    .format("TEXT")
                                    .build()
                                .column()
                                    .name("status")
                                    .tableOid(0)
                                    .index(0)
                                    .typeOid(20)
                                    .length(8)
                                    .modifier(-1)
                                    .format("TEXT")
                                    .build()
                                .column()
                                    .name("user_id")
                                    .tableOid(0)
                                    .index(0)
                                    .typeOid(17)
                                    .length(-1)
                                    .modifier(-1)
                                    .format("TEXT")
                                    .build()
                                .build()
                              .build()}

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("DESCRIBE")
                                .build()
                              .build()}

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

read zilla:data.ext ${pgsql:dataEx()
                              .typeId(zilla:id("pgsql"))
                              .query()
                                .build()
                              .build()}
read "CREATE SINK active_users_sink"
      "FROM active_users"
      "WITH ("
      "   connector='kafka',"
      "   topic='users',"
      "   properties.bootstrap.server='localhost:9092',"
      "   primary_key='user_id'"
      ") FORMAT UPSERT ENCODE AVRO ("
      "    schema.registry = 'http://localhost:8081'"
      ");"
      [0x00]

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .completion()
                                .tag("CREATE_SINK") #TODO: double check
                                .build()
                              .build()}

write advise zilla:flush ${pgsql:flushEx()
                              .typeId(zilla:id("pgsql"))
                              .ready()
                                .status("IDLE")
                                .build()
                              .build()}

write close
read closed
