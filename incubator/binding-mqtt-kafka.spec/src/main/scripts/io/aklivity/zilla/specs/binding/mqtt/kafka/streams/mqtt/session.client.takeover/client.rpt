#
# Copyright 2021-2023 Aklivity Inc
#
# Licensed under the Aklivity Community License (the "License"); you may not use
# this file except in compliance with the License.  You may obtain a copy of the
# License at
#
#   https://www.aklivity.io/aklivity-community-license/
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#

connect "zilla://streams/mqtt0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${mqtt:beginEx()
                               .typeId(zilla:id("mqtt"))
                               .session()
                                  .expiry(1)
                                  .clientId("client-1")
                                  .build()
                               .build()}

connected

write zilla:data.ext ${mqtt:dataEx()
                             .typeId(zilla:id("mqtt"))
                             .session()
                                .kind("STATE")
                                .build()
                             .build()}

write ${mqtt:session()
               .subscription("sensor/one", 1)
               .build()}

read ${mqtt:session()
               .subscription("sensor/one", 1)
               .build()}

write notify READ_SESSION_STATE

read closed
write close

connect await READ_SESSION_STATE
        "zilla://streams/mqtt0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${mqtt:beginEx()
                             .typeId(zilla:id("mqtt"))
                             .subscribe()
                                .clientId("client-1")
                                .filter("sensor/one", 1)
                                .build()
                             .build()}
connected
write notify CONNECTED

write close
read closed


connect await CONNECTED
        "zilla://streams/mqtt0"
         option zilla:window 8192
         option zilla:transmission "duplex"


write zilla:begin.ext ${mqtt:beginEx()
                               .typeId(zilla:id("mqtt"))
                               .session()
                                  .expiry(1)
                                  .clientId("client-1")
                                  .build()
                               .build()}

connected

read ${mqtt:session()
               .subscription("sensor/one", 1)
               .build()}

write notify SESSION_READY2

connect await SESSION_READY2
        "zilla://streams/mqtt0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${mqtt:beginEx()
                             .typeId(zilla:id("mqtt"))
                             .subscribe()
                                .clientId("client-1")
                                .filter("sensor/one", 1)
                                .build()
                             .build()}
connected

read zilla:data.ext ${mqtt:matchDataEx()
                             .typeId(zilla:id("mqtt"))
                             .subscribe()
                                 .topic("sensor/one")
                                 .subscriptionId(1)
                                 .format("TEXT")
                                 .build()
                             .build()}

read "message"
