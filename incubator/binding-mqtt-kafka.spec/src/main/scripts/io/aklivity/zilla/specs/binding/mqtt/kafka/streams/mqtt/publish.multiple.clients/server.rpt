#
# Copyright 2021-2023 Aklivity Inc
#
# Licensed under the Aklivity Community License (the "License"); you may not use
# this file except in compliance with the License.  You may obtain a copy of the
# License at
#
#   https://www.aklivity.io/aklivity-community-license/
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#

accept "zilla://streams/mqtt0"
        option zilla:window 8192
        option zilla:transmission "duplex"

accepted

read zilla:begin.ext ${mqtt:matchBeginEx()
                             .typeId(zilla:id("mqtt"))
                             .publish()
                                .clientId("client-1")
                                .topic("sensor/one")
                                .build()
                             .build()}

connected

read zilla:data.ext ${mqtt:matchDataEx()
                            .typeId(zilla:id("mqtt"))
                            .publish()
                                .format("TEXT")
                                .build()
                            .build()}

read "message1"

read zilla:data.ext ${mqtt:matchDataEx()
                            .typeId(zilla:id("mqtt"))
                            .publish()
                                .format("TEXT")
                                .build()
                            .build()}

read "message2"

read zilla:data.ext ${mqtt:matchDataEx()
                            .typeId(zilla:id("mqtt"))
                            .publish()
                                .format("TEXT")
                                .build()
                            .build()}

read "message3"

accepted

read zilla:begin.ext ${mqtt:matchBeginEx()
                             .typeId(zilla:id("mqtt"))
                             .publish()
                                .clientId("client-2")
                                .topic("sensor/two")
                                .build()
                             .build()}

connected

read zilla:data.ext ${mqtt:matchDataEx()
                            .typeId(zilla:id("mqtt"))
                            .publish()
                                .format("TEXT")
                                .build()
                            .build()}

read "message1"

read zilla:data.ext ${mqtt:matchDataEx()
                            .typeId(zilla:id("mqtt"))
                            .publish()
                                .format("TEXT")
                                .build()
                            .build()}

read "message2"

read zilla:data.ext ${mqtt:matchDataEx()
                            .typeId(zilla:id("mqtt"))
                            .publish()
                                .format("TEXT")
                                .build()
                            .build()}

read "message3"
