#
# Copyright 2021-2023 Aklivity Inc
#
# Licensed under the Aklivity Community License (the "License"); you may not use
# this file except in compliance with the License.  You may obtain a copy of the
# License at
#
#   https://www.aklivity.io/aklivity-community-license/
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#

connect "zilla://streams/mqtt0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${mqtt:beginEx()
                           .typeId(zilla:id("mqtt"))
                           .session()
                              .flags("WILL")
                              .expiry(1)
                              .clientId("one")
                              .build()
                           .build()}

connected

write zilla:data.ext ${mqtt:dataEx()
                             .typeId(zilla:id("mqtt"))
                             .session()
                                .kind("WILL")
                                .build()
                             .build()}
write ${mqtt:will()
               .topic("obituaries")
               .format("TEXT")
               .payload("client-1 disconnected abruptly")
               .build()}
write flush

read zilla:data.empty
read notify RECEIVED_CONNACK_TRIGGER

read closed
write close

connect await RECEIVED_CONNACK_TRIGGER
        "zilla://streams/mqtt0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${mqtt:beginEx()
                           .typeId(zilla:id("mqtt"))
                           .session()
                              .flags("WILL")
                              .expiry(1)
                              .clientId("one")
                              .build()
                           .build()}

connected

write zilla:data.ext ${mqtt:dataEx()
                             .typeId(zilla:id("mqtt"))
                             .session()
                                .kind("WILL")
                                .build()
                             .build()}
write ${mqtt:will()
            .topic("obituaries")
            .format("TEXT")
            .payload("client-1 disappeared abruptly")
            .build()}
write flush

read zilla:data.empty
