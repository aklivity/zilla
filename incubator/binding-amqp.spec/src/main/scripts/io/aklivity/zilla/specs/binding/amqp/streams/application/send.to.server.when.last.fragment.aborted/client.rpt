#
# Copyright 2021-2023 Aklivity Inc.
#
# Aklivity licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

connect "zilla://streams/app0"
        option zilla:window 8192
        option zilla:transmission "duplex"

write zilla:begin.ext ${amqp:beginEx()
                              .typeId(zilla:id("amqp"))
                              .address("clients")
                              .capabilities("SEND_ONLY")
                              .senderSettleMode("SETTLED")
                              .receiverSettleMode("FIRST")
                              .build()}

read zilla:begin.ext ${amqp:beginEx()
                             .typeId(zilla:id("amqp"))
                             .address("clients")
                             .capabilities("SEND_ONLY")
                             .senderSettleMode("SETTLED")
                             .receiverSettleMode("FIRST")
                             .build()}
connected

write zilla:data.ext ${amqp:dataEx()
                             .typeId(zilla:id("amqp"))
                             .deliveryTag("")
                             .messageFormat(0)
                             .flags("SETTLED")
                             .bodyKind("VALUE_BINARY32")
                             .deferred(300 - 100)
                             .build()}

write option zilla:flags "init"
write ${amqp:randomBytes(100)}
write flush

write option zilla:flags "none"
write ${amqp:randomBytes(100)}
write flush

write option zilla:flags "incomplete"
write zilla:data.empty
write flush

write option zilla:flags "auto"

write zilla:data.ext ${amqp:dataEx()
                             .typeId(zilla:id("amqp"))
                             .deliveryTag("")
                             .messageFormat(0)
                             .flags("SETTLED")
                             .bodyKind("VALUE_BINARY8")
                             .build()}
write ${amqp:randomBytes(10)}

read closed
