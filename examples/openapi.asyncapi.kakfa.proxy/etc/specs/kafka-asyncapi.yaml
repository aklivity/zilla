#
# Copyright 2021-2023 Aklivity Inc.
#
# Aklivity licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

asyncapi: 3.0.0
info:
  title: Zilla Petstore Kafka API
  version: 2.0.0
  description: >
    This Petstore specification illustrates how Zilla can proxy OpenAPI-defined
    REST APIs to AsyncAPI-defined Kafka APIs.
  license:
    name: Aklivity Community License
    url: https://github.com/aklivity/zilla/blob/main/LICENSE
  contact:
    name: Aklivity Community
    url: https://www.aklivity.io/slack
  externalDocs:
    description: Examples Repo
    url: https://github.com/aklivity/zilla-examples/tree/main/openapi.asyncapi.proxy#readme
  tags:
    - name: pet
      description: Everything about your Pets
defaultContentType: application/json
servers:
  plain:
    host: kafka.examples.dev:29092
    protocol: kafka
channels:
  pets:
    address: "petstore-pets"
    messages:
      pet:
        $ref: "#/components/messages/pet"
      empty:
        $ref: "#/components/messages/empty"
    description: The topic on which pet values may be produced and consumed.
operations:
  listPets:
    action: receive
    channel:
      $ref: "#/channels/pets"
    summary: >-
      List all pets.
    messages:
      - $ref: "#/channels/pets/messages/pet"
  createPet:
    action: send
    channel:
      $ref: "#/channels/pets"
    summary: >-
      Create a pet.
    messages:
      - $ref: "#/channels/pets/messages/pet"
  listPetById:
    action: receive
    channel:
      $ref: "#/channels/pets"
    summary: >-
      List a pet by id.
    messages:
      - $ref: "#/channels/pets/messages/pet"
  updatePet:
    action: send
    channel:
      $ref: "#/channels/pets"
    summary: >-
      Update an existing Pet.
    messages:
      - $ref: "#/channels/pets/messages/pet"
  deletePet:
    action: send
    channel:
      $ref: "#/channels/pets"
    summary: >-
      Deletes a pet.
    messages:
      - $ref: "#/channels/pets/messages/empty"
components:
  messages:
    empty:
      name: EmptyMessage
      payload:
        type: "null"
    pet:
      name: Pet
      title: Pet
      summary: Inform about Pet.
      contentType: application/json
      payload:
        $ref: "#/components/schemas/Pet"
    pets:
      name: Pets
      title: Pets
      summary: A list of Pets.
      contentType: application/json
      payload:
        type: array
        items:
          $ref: "#/components/schemas/Pet"
  schemas:
    Pet:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
