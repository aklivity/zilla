name: ${NAMESPACE:-zilla-grpc-kafka-proxy}
services:
  zilla:
    image: ghcr.io/aklivity/zilla:${ZILLA_VERSION:-latest}
    restart: unless-stopped
    hostname: zilla.examples.dev
    ports:
      - 7151:7151
    healthcheck:
      interval: 5s
      timeout: 3s
      retries: 5
      test: ["CMD", "bash", "-c", "echo -n '' > /dev/tcp/127.0.0.1/7151"]
    environment:
      KAFKA_BOOTSTRAP_SERVER: kafka.examples.dev:29092
      ECHO_SERVER_HOST: grpc-echo
      ECHO_SERVER_PORT: 50051
    volumes:
      - ./etc:/etc/zilla
    command: start -v -e

  grpc-echo:
    image: ghcr.io/aklivity/extras-grpc-echo-server:sha-478b2ce
    restart: unless-stopped
    ports:
      - 50051:50051
    tty: true
    healthcheck:
      interval: 5s
      timeout: 3s
      retries: 5
      test: netstat -an | grep 50051 > /dev/null; if [ 0 != $? ]; then exit 1; fi;
    command: --port 50051

  kafka:
    image: bitnami/kafka:3.5
    restart: unless-stopped
    hostname: kafka.examples.dev
    ports:
      - 9092:9092
    healthcheck:
      test: /opt/bitnami/kafka/bin/kafka-cluster.sh cluster-id --bootstrap-server kafka.examples.dev:29092 || exit 1
      interval: 1s
      timeout: 60s
      retries: 60
    environment:
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_BROKER_ID: "1"
      KAFKA_CFG_GROUP_INITIAL_REBALANCE_DELAY_MS: "0"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@127.0.0.1:9093"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CLIENT:PLAINTEXT,INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_LOG_DIRS: "/tmp/logs"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_LISTENERS: "CLIENT://:9092,INTERNAL://:29092,CONTROLLER://:9093"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_CFG_ADVERTISED_LISTENERS: "CLIENT://localhost:9092,INTERNAL://kafka.examples.dev:29092"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"

  kafka-init:
    image: bitnami/kafka:3.5
    user: root
    depends_on:
      kafka:
        condition: service_healthy
        restart: true
    deploy:
      restart_policy:
        condition: none
        max_attempts: 0
    entrypoint: ["/bin/sh", "-c"]
    environment:
      KAFKA_BOOTSTRAP_SERVER: kafka.examples.dev:29092
    command:
      - |
        echo -e "Creating kafka topic";
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server $${KAFKA_BOOTSTRAP_SERVER} --create --if-not-exists --topic echo-requests
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server $${KAFKA_BOOTSTRAP_SERVER} --create --if-not-exists --topic echo-responses
        echo -e "Successfully created the following topics:";
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server $${KAFKA_BOOTSTRAP_SERVER} --list;

  kafka-ui:
    image: ghcr.io/kafbat/kafka-ui:v1.0.0
    restart: unless-stopped
    ports:
      - 8080:8080
    depends_on:
      kafka:
        condition: service_healthy
        restart: true
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka.examples.dev:29092

  kafkacat:
    image: confluentinc/cp-kafkacat:7.1.9
    command: "bash"
    stdin_open: true
    tty: true

  grpcurl:
    image: fullstorydev/grpcurl
    stdin_open: true
    tty: true
    profiles:
      - on-demand
    volumes:
      - ./etc/protos/echo.proto:/echo.proto

networks:
  default:
    driver: bridge
