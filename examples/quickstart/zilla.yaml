name: zilla-quickstart
bindings:

# Gateway ingress config
  tcp_server:
    type: tcp
    kind: server
    options:
      host: 0.0.0.0
      port: 8080
    telemetry:
      metrics:
        - stream.*
    exit: http_server
  http_server:
    type: http
    kind: server
    options:
      access-control:
        policy: cross-origin
    routes:
      - when:
          - headers:
              :scheme: http
              :authority: localhost:8080
              :path: /sse/stream
        exit: sse_server
      - when:
          - headers:
              :scheme: http
              :authority: localhost:8080
              :path: /sse/*
        exit: sse_http_kafka_proxy
      - when:
          - headers:
              :scheme: http
              :authority: localhost:8080
              :path: /api/*
        exit: http_api_kafka_proxy
      - when:
          - headers:
              :scheme: http
              :authority: localhost:8080
        exit: grpc_server
    telemetry:
      metrics:
        - http.*

# REST proxy endpoints to Kafka a topic
  http_api_kafka_proxy:
    type: http-kafka
    kind: proxy
    routes:
      - when:
          - method: POST
            path: /api/items
        exit: kafka_cache_client
        with:
          capability: produce
          topic: items-crud
          key: ${idempotencyKey}
      - when:
          - method: PUT
            path: /api/items/{id}
        exit: kafka_cache_client
        with:
          capability: produce
          topic: items-crud
          key: ${params.id}
      - when:
          - method: DELETE
            path: /api/items/{id}
        exit: kafka_cache_client
        with:
          capability: produce
          topic: items-crud
          key: ${params.id}
      - when:
          - method: GET
            path: /api/items
        exit: kafka_cache_client
        with:
          capability: fetch
          topic: items-crud
          merge:
            content-type: application/json
      - when:
          - method: GET
            path: /api/items/{id}
        exit: kafka_cache_client
        with:
          capability: fetch
          topic: items-crud
          filters:
            - key: ${params.id}

# SSE proxy endpoints to Kafka a topic
  sse_http_kafka_proxy:
    type: http-kafka
    kind: proxy
    routes:
      - when:
          - method: POST
            path: /sse/events
        exit: kafka_cache_client
        with:
          capability: produce
          topic: events-sse
          key: ${idempotencyKey}
      - when:
          - method: GET
            path: /sse/events
        exit: kafka_cache_client
        with:
          capability: fetch
          topic: events-sse
          merge:
            content-type: application/json
      - when:
          - method: GET
            path: /sse/events/{id}
        exit: kafka_cache_client
        with:
          capability: fetch
          topic: events-sse
          filters:
            - key: ${params.id}

# SSE Server With an exit to Kafka
  sse_server:
    type: sse
    kind: server
    exit: sse_kafka_proxy
  sse_kafka_proxy:
    type: sse-kafka
    kind: proxy
    routes:
      - when:
          - path: /sse/stream
        exit: kafka_cache_client
        with:
          topic: events-sse

# gRPC service definition
  grpc_server:
    type: grpc
    kind: server
    options:
      services:
        - proto/echo.proto
        - proto/route_guide.proto
    routes:
      - when:
          - method: example.EchoService/*
        exit: grpc_kafka
      - when:
          - method: routeguide.RouteGuide/*
        exit: grpc_kafka
    telemetry:
      metrics:
        - grpc.*

# gRPC RoutGuide server
  route_guide_server_grpc_client:
    type: grpc
    kind: client
    exit: route_guide_server_http_client
  route_guide_server_http_client:
    type: http
    kind: client
    options:
      versions:
        - h2
    exit: route_guide_server_tcp_client
  route_guide_server_tcp_client:
    type: tcp
    kind: client
    options:
      host: route_guide_server
      port: 50051

# gRPC proxy service to Kafka topics
  grpc_kafka:
    type: grpc-kafka
    kind: proxy
    routes:
      - when:
          - method: example.EchoService/*
        exit: kafka_cache_client
        with:
          capability: produce
          topic: echo-service-messages
          acks: leader_only
          reply-to: echo-service-messages
      - when:
          - method: routeguide.RouteGuide/*
        exit: kafka_cache_client
        with:
          capability: produce
          topic: route-guide-requests
          acks: leader_only
          reply-to: route-guide-responses

# gRPC Kafka fanout to a remote server
  route_guide_remote_server:
    type: kafka-grpc
    kind: remote_server
    entry: kafka_cache_client
    options:
      acks: leader_only
    routes:
      - when:
          - topic: route-guide-requests
            reply-to: route-guide-responses
            method: routeguide.RouteGuide/*
        with:
          scheme: http
          authority: route_guide_server:50051
        exit: route_guide_server_grpc_client

# Kafka caching layer
  kafka_cache_client:
    type: kafka
    kind: cache_client
    options:
      bootstrap:
        - items-crud
        - events-sse
        - echo-service-messages
        - route-guide-requests
        - route-guide-responses
    exit: kafka_cache_server
  kafka_cache_server:
    type: kafka
    kind: cache_server
    exit: kafka_client

# Connect to local Kafka
  kafka_client:
    type: kafka
    kind: client
    exit: kafka_tcp_client
  kafka_tcp_client:
    type: tcp
    kind: client
    options:
      host: kafka
      port: 29092
    routes:
      - when:
          - cidr: 0.0.0.0/0

telemetry:
  attributes:
    service.namespace: zilla-quickstart

  # Desired metrics to track
  metrics:
    - http.request.size
    - http.response.size
    - stream.opens.sent
    - stream.closes.sent
    - grpc.requests.per.rpc
    - grpc.responses.per.rpc

  # Prometheus endpoint definition
  exporters:
    prometheus_metric_exporter:
      type: prometheus
      options:
        endpoints:
          - scheme: http
            path: /metrics
            port: 9090
