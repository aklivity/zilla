name: zilla-quickstart
bindings:

# Proxy service entrypoint
  north_tcp_server:
    type: tcp
    kind: server
    options:
      host: 0.0.0.0
      port:
        - 7114
        - 7151
        - 7183
    routes:
        - when:
            - port: 7114
          exit: north_http_server
        - when:
            - port: 7151
          exit: north_grpc_http_server
        - when:
            - port: 7183
          exit: north_mqtt_server
    telemetry:
      metrics:
        - stream.*
  north_http_server:
    type: http
    kind: server
    options:
      access-control:
        policy: cross-origin
    routes:
      - when:
          - headers:
              :scheme: http
              :authority: localhost:7114
              :path: /sse/stream
        exit: north_sse_server
      - when:
          - headers:
              :scheme: http
              :authority: localhost:7114
              :path: /sse/*
        exit: north_sse_api_http_kafka_mapping
      - when:
          - headers:
              :scheme: http
              :authority: localhost:7114
              :path: /api/*
        exit: north_rest_api_http_kafka_mapping
    telemetry:
      metrics:
        - stream.*
        - http.*
  north_grpc_http_server:
    type: http
    kind: server
    options:
      versions:
        - h2
      access-control:
        policy: cross-origin
    exit: north_grpc_server
    telemetry:
      metrics:
        - stream.*
        - http.*

# REST proxy endpoints to Kafka a topic
  north_rest_api_http_kafka_mapping:
    type: http-kafka
    kind: proxy
    routes:
      - when:
          - method: POST
            path: /api/items
        exit: north_kafka_cache_client
        with:
          capability: produce
          topic: items-crud
          key: ${idempotencyKey}
      - when:
          - method: PUT
            path: /api/items/{id}
        exit: north_kafka_cache_client
        with:
          capability: produce
          topic: items-crud
          key: ${params.id}
      - when:
          - method: DELETE
            path: /api/items/{id}
        exit: north_kafka_cache_client
        with:
          capability: produce
          topic: items-crud
          key: ${params.id}
      - when:
          - method: GET
            path: /api/items
        exit: north_kafka_cache_client
        with:
          capability: fetch
          topic: items-crud
          merge:
            content-type: application/json
      - when:
          - method: GET
            path: /api/items/{id}
        exit: north_kafka_cache_client
        with:
          capability: fetch
          topic: items-crud
          filters:
            - key: ${params.id}

# SSE proxy endpoints to Kafka a topic
  north_sse_api_http_kafka_mapping:
    type: http-kafka
    kind: proxy
    routes:
      - when:
          - method: POST
            path: /sse/events
        exit: north_kafka_cache_client
        with:
          capability: produce
          topic: events-sse
          key: ${idempotencyKey}
      - when:
          - method: GET
            path: /sse/events
        exit: north_kafka_cache_client
        with:
          capability: fetch
          topic: events-sse
          merge:
            content-type: application/json
      - when:
          - method: GET
            path: /sse/events/{id}
        exit: north_kafka_cache_client
        with:
          capability: fetch
          topic: events-sse
          filters:
            - key: ${params.id}

# SSE Server to Kafka topics
  north_sse_server:
    type: sse
    kind: server
    exit: north_sse_kafka_mapping
  north_sse_kafka_mapping:
    type: sse-kafka
    kind: proxy
    routes:
      - when:
          - path: /sse/stream
        exit: north_kafka_cache_client
        with:
          topic: events-sse

# MQTT Server to Kafka topics
  north_mqtt_server:
    type: mqtt
    kind: server
    exit: north_mqtt_kafka_mapping
    telemetry:
      metrics:
        - stream.*
  north_mqtt_kafka_mapping:
    type: mqtt-kafka
    kind: proxy
    options:
      topics:
        sessions: iot-sessions
        messages: iot-messages
        retained: iot-retained
    exit: north_kafka_cache_client

# gRPC service definition to Kafka topics
  north_grpc_server:
    type: grpc
    kind: server
    options:
      services:
        - proto/echo.proto
        - proto/route_guide.proto
    routes:
      - when:
          - method: example.EchoService/*
        exit: north_grpc_kafka_mapping
      - when:
          - method: routeguide.RouteGuide/*
        exit: north_grpc_kafka_mapping
    telemetry:
      metrics:
        - stream.*
        - grpc.*
  north_grpc_kafka_mapping:
    type: grpc-kafka
    kind: proxy
    routes:
      - when:
          - method: example.EchoService/*
        exit: north_kafka_cache_client
        with:
          capability: produce
          topic: echo-service-messages
          acks: leader_only
          reply-to: echo-service-messages
      - when:
          - method: routeguide.RouteGuide/*
        exit: north_kafka_cache_client
        with:
          capability: produce
          topic: route-guide-requests
          acks: leader_only
          reply-to: route-guide-responses

# Kafka sync layer
  north_kafka_cache_client:
    type: kafka
    kind: cache_client
    exit: south_kafka_cache_server
  south_kafka_cache_server:
    type: kafka
    kind: cache_server
    options:
      bootstrap:
        - items-crud
        - route-guide-requests
        - route-guide-responses
        - iot-messages
        - iot-retained
    exit: south_kafka_client

# Connect to local Kafka
  south_kafka_client:
    type: kafka
    kind: client
    exit: south_kafka_tcp_client
  south_kafka_tcp_client:
    type: tcp
    kind: client
    options:
      host: ${{env.KAFKA_HOST}}
      port: ${{env.KAFKA_PORT}}
    routes:
      - when:
          - cidr: 0.0.0.0/0

# Kafka to external gRPC server
  west_kafka_grpc_remote_server:
    type: kafka-grpc
    kind: remote_server
    entry: north_kafka_cache_client
    options:
      acks: leader_only
    routes:
      - when:
          - topic: route-guide-requests
            reply-to: route-guide-responses
            method: routeguide.RouteGuide/*
        with:
          scheme: http
          authority: ${{env.ROUTE_GUIDE_SERVER_HOST}}:${{env.ROUTE_GUIDE_SERVER_PORT}}
        exit: west_route_guide_grpc_client

# gRPC RoutGuide server config
  west_route_guide_grpc_client:
    type: grpc
    kind: client
    exit: west_route_guide_http_client
  west_route_guide_http_client:
    type: http
    kind: client
    options:
      versions:
        - h2
    exit: west_route_guide_tcp_client
  west_route_guide_tcp_client:
    type: tcp
    kind: client
    options:
      host: ${{env.ROUTE_GUIDE_SERVER_HOST}}
      port: ${{env.ROUTE_GUIDE_SERVER_PORT}}

telemetry:
  # Desired metrics to track
  metrics:
    - http.active.requests
    - http.request.size
    - http.response.size
    - stream.opens.sent
    - stream.opens.received
    - stream.closes.sent
    - stream.closes.received
    - stream.errors.sent
    - stream.errors.received
    - stream.active.sent
    - stream.active.received
    - grpc.active.requests
    - grpc.requests.per.rpc
    - grpc.responses.per.rpc

  # Prometheus endpoint definition
  exporters:
    prometheus_metric_exporter:
      type: prometheus
      options:
        endpoints:
          - scheme: http
            path: /metrics
            port: 7190
