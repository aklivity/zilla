version: '3'
services:
  kafka:
    image: docker.io/bitnami/kafka:3.1
    container_name: kafka-zq
    restart: unless-stopped
    ports:
      - 9092:9092
      - 29092:9092
    environment:
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_BROKER_ID: "1"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@127.0.0.1:9093"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CLIENT:PLAINTEXT,INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_LOG_DIRS: "/tmp/logs"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_LISTENERS: "CLIENT://:9092,INTERNAL://:29092,CONTROLLER://:9093"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_CFG_ADVERTISED_LISTENERS: "CLIENT://localhost:9092,INTERNAL://kafka:29092"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"

  kafka-init:
    image: docker.io/bitnami/kafka:3.1
    container_name: temp-kafka-init-zq
    command: 
      - "/bin/bash"
      - "-c"
      -  | 
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic items-crud --config cleanup.policy=compact
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic events-sse --config cleanup.policy=compact
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic echo-service-messages
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic route-guide-requests
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic route-guide-responses
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic iot-messages
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic iot-sessions --config cleanup.policy=compact
        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic iot-retained --config cleanup.policy=compact
    depends_on:
      - kafka
    init: true

  kafka-ui:
    container_name: kafka-ui-zq
    image: provectuslabs/kafka-ui:latest
    ports:
      - 80:8080
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092

  zilla:
    image: ghcr.io/aklivity/zilla:0.9.52
    container_name: zilla-zq
    restart: unless-stopped
    depends_on:
      - kafka
    ports:
      - 1883:1883
      - 7114:7114
      - 7190:7190
    environment:
      ROUTE_GUIDE_SERVER_HOST: route-guide-server
      ROUTE_GUIDE_SERVER_PORT: 50051
    volumes:
      - ./zilla.yaml:/etc/zilla/zilla.yaml
      - ./grpc/echo.proto:/etc/zilla/proto/echo.proto
      - ./grpc/route_guide.proto:/etc/zilla/proto/route_guide.proto
    command: start -v -e

  mqtt-simulator:
    build: https://github.com/vordimous/mqtt-simulator.git#zilla-quickstart
    container_name: mqtt-simulator-zq
    image: aklivity/mqtt-simulator:local
    restart: unless-stopped
    volumes:
      - ./mqtt/config/settings.json:/usr/src/app/config/settings.json
    depends_on:
      kafka-init:
        condition: service_completed_successfully

  route-guide-server:
    build: ./grpc/route_guide/server
    container_name: route-guide-server-zq
    image: aklivity/route-guide-server:local
    restart: unless-stopped
    ports:
      - 50051:50051

  route-guide-client:
    build: ./grpc/route_guide/client
    container_name: temp-route-guide-test-client-zq
    image: aklivity/route-guide-client:local
    depends_on:
      - route-guide-server
    command: "-addr=route-guide-server:50051"

networks:
  default:
    name: zilla-quickstart-network
    driver: bridge
