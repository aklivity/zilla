#
# Copyright 2021-2023 Aklivity Inc.
#
# Aklivity licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

connect "zilla://streams/composite0"
         option zilla:window 8192
         option zilla:transmission "duplex"
         option zilla:ephemeral "test:composite0/mqtt_api"

write zilla:begin.ext ${mqtt:beginEx()
                            .compositeId(core:decodeLong("0x0000_0001_0000_0000"))
                            .typeId(zilla:id("mqtt"))
                            .session()
                              .clientId("client")
                              .build()
                            .build()}

read zilla:begin.ext ${mqtt:matchBeginEx()
                              .typeId(zilla:id("mqtt"))
                              .session()
                                .clientId("client")
                                .build()
                              .build()}

connected

read zilla:data.empty
read notify RECEIVED_SESSION_STATE


connect await RECEIVED_SESSION_STATE
        "zilla://streams/composite0"
         option zilla:window 8192
         option zilla:transmission "duplex"
         option zilla:ephemeral "test:composite0/mqtt_api"

write zilla:begin.ext ${mqtt:beginEx()
                            .compositeId(core:decodeLong("0x0000_0001_0000_0002"))
                            .typeId(zilla:id("mqtt"))
                            .publish()
                                .clientId("client")
                                .topic("sensors/one")
                                .build()
                            .build()}

connected

write zilla:data.ext ${mqtt:dataEx()
                             .typeId(zilla:id("mqtt"))
                             .publish()
                                .qos("AT_MOST_ONCE")
                                .expiryInterval(15)
                                .contentType("asyncapiMessage")
                                .format("TEXT")
                                .responseTopic("sensors/one")
                                .correlation("info")
                                .build()
                             .build()}

write "asyncapiMessage"
write flush


connect await RECEIVED_SESSION_STATE
        "zilla://streams/composite0"
         option zilla:window 8192
         option zilla:transmission "duplex"
         option zilla:ephemeral "test:composite0/mqtt_api"

write zilla:begin.ext ${mqtt:beginEx()
                            .compositeId(core:decodeLong("0x0000_0001_0000_0001"))
                            .typeId(zilla:id("mqtt"))
                            .subscribe()
                                .clientId("client")
                                .filter("sensors/two", 1, "AT_MOST_ONCE", "SEND_RETAINED")
                                .build()
                            .build()}

connected
