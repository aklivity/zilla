#
# Copyright 2021-2023 Aklivity Inc.
#
# Aklivity licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

accept "zilla://streams/app0"
        option zilla:window 8192
        option zilla:transmission "duplex"

accepted

read zilla:begin.ext ${mqtt:matchBeginEx()
                             .typeId(zilla:id("mqtt"))
                             .session()
                                .flags("CLEAN_START")
                                .clientId("client")
                                .build()
                             .build()}

write zilla:begin.ext ${mqtt:beginEx()
                              .typeId(zilla:id("mqtt"))
                              .session()
                                .flags("CLEAN_START")
                                .qosMax(2)
                                .packetSizeMax(66560)
                                .capabilities("RETAIN", "WILDCARD", "SUBSCRIPTION_IDS", "SHARED_SUBSCRIPTIONS")
                                .clientId("client")
                                .build()
                              .build()}

connected

write zilla:data.empty
write flush

read zilla:data.ext ${mqtt:dataEx()
                             .typeId(zilla:id("mqtt"))
                             .session()
                                .kind("STATE")
                                .build()
                             .build()}

read ${mqtt:session()
               .subscription("sensor/+/#", 1, "AT_LEAST_ONCE", "SEND_RETAINED")
               .build()}

write ${mqtt:session()
               .subscription("sensor/+/#", 1, "AT_LEAST_ONCE", "SEND_RETAINED")
               .build()}
write flush

read zilla:data.ext ${mqtt:dataEx()
                             .typeId(zilla:id("mqtt"))
                             .session()
                                .kind("STATE")
                                .build()
                             .build()}

read ${mqtt:session()
               .subscription("sensor/+/#", 1, "AT_LEAST_ONCE", "SEND_RETAINED")
               .subscription("sensor/+/1", 2, "EXACTLY_ONCE", "SEND_RETAINED")
               .build()}

write ${mqtt:session()
               .subscription("sensor/+/#", 1, "AT_LEAST_ONCE", "SEND_RETAINED")
               .subscription("sensor/+/1", 2, "EXACTLY_ONCE", "SEND_RETAINED")
               .build()}
write flush
write notify SENT_SESSION_STATE


accepted

read zilla:begin.ext ${mqtt:matchBeginEx()
                             .typeId(zilla:id("mqtt"))
                             .subscribe()
                                 .clientId("client")
                                 .qos("AT_MOST_ONCE")
                                 .filter("sensor/+/#", 1, "AT_LEAST_ONCE", "SEND_RETAINED")
                                 .build()
                             .build()}

connected

read advised zilla:flush ${mqtt:flushEx()
                                 .typeId(zilla:id("mqtt"))
                                 .subscribe()
                                     .filter("sensor/+/#", 1, "AT_LEAST_ONCE", "SEND_RETAINED")
                                     .filter("sensor/+/1", 2, "EXACTLY_ONCE", "SEND_RETAINED")
                                     .build()
                                 .build()}


accepted

read zilla:begin.ext ${mqtt:matchBeginEx()
                             .typeId(zilla:id("mqtt"))
                             .subscribe()
                                 .clientId("client")
                                 .qos("AT_LEAST_ONCE")
                                 .filter("sensor/+/#", 1, "AT_LEAST_ONCE", "SEND_RETAINED")
                                 .build()
                             .build()}

connected

read advised zilla:flush ${mqtt:flushEx()
                                 .typeId(zilla:id("mqtt"))
                                 .subscribe()
                                     .filter("sensor/+/#", 1, "AT_LEAST_ONCE", "SEND_RETAINED")
                                     .filter("sensor/+/1", 2, "EXACTLY_ONCE", "SEND_RETAINED")
                                     .build()
                                 .build()}

write await SENT_SESSION_STATE
write zilla:data.ext ${mqtt:dataEx()
                             .typeId(zilla:id("mqtt"))
                             .subscribe()
                                 .topic("sensor/one/1")
                                 .packetId(1)
                                 .qos("EXACTLY_ONCE")
                                 .subscriptionId(1)
                                 .format("TEXT")
                                 .build()
                             .build()}
write "message"
write flush
write notify SENT_QOS1_DATA

read advised zilla:flush ${mqtt:flushEx()
                                 .typeId(zilla:id("mqtt"))
                                 .subscribe()
                                     .qos("AT_LEAST_ONCE")
                                     .packetId(1)
                                     .build()
                                 .build()}


accepted

read zilla:begin.ext ${mqtt:matchBeginEx()
                             .typeId(zilla:id("mqtt"))
                             .subscribe()
                                .clientId("client")
                                .qos("EXACTLY_ONCE")
                                .filter("sensor/+/1", 2, "EXACTLY_ONCE", "SEND_RETAINED")
                                .build()
                             .build()}

connected

write await SENT_QOS1_DATA
write zilla:data.ext ${mqtt:dataEx()
                             .typeId(zilla:id("mqtt"))
                             .subscribe()
                                 .topic("sensor/one/1")
                                 .packetId(1)
                                 .qos("EXACTLY_ONCE")
                                 .subscriptionId(2)
                                 .format("TEXT")
                                 .build()
                             .build()}
write "message"
write flush

read advised zilla:flush ${mqtt:flushEx()
                                 .typeId(zilla:id("mqtt"))
                                 .subscribe()
                                     .qos("EXACTLY_ONCE")
                                     .packetId(1)
                                     .state("INCOMPLETE")
                                     .build()
                                 .build()}

write advise zilla:flush ${mqtt:flushEx()
                                 .typeId(zilla:id("mqtt"))
                                 .subscribe()
                                     .qos("EXACTLY_ONCE")
                                     .packetId(1)
                                     .state("INCOMPLETE")
                                     .build()
                                 .build()}

read advised zilla:flush ${mqtt:flushEx()
                                 .typeId(zilla:id("mqtt"))
                                 .subscribe()
                                     .qos("EXACTLY_ONCE")
                                     .packetId(1)
                                     .build()
                                 .build()}

