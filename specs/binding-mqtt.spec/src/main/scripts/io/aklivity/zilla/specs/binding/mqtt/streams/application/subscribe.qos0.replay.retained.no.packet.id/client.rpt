#
# Copyright 2021-2023 Aklivity Inc.
#
# Aklivity licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

connect "zilla://streams/app0"
         option zilla:window 8192
         option zilla:transmission "duplex"
         option zilla:affinity 0xc1

write zilla:begin.ext ${mqtt:beginEx()
                              .typeId(zilla:id("mqtt"))
                              .session()
                                .flags("CLEAN_START")
                                .clientId("client1")
                                .build()
                              .build()}

read zilla:begin.ext ${mqtt:matchBeginEx()
                              .typeId(zilla:id("mqtt"))
                              .session()
                                .flags("CLEAN_START")
                                .qosMax(2)
                                .packetSizeMax(66560)
                                .capabilities("RETAIN", "WILDCARD", "SUBSCRIPTION_IDS", "SHARED_SUBSCRIPTIONS")
                                .clientId("client1")
                                .build()
                              .build()}


connected

read zilla:data.empty
read notify RECEIVED_SESSION_STATE


connect await RECEIVED_SESSION_STATE
        "zilla://streams/app0"
         option zilla:window 8192
         option zilla:transmission "duplex"
         option zilla:affinity 0xc1

write zilla:begin.ext ${mqtt:beginEx()
                             .typeId(zilla:id("mqtt"))
                             .publish()
                                .clientId("client1")
                                .topic("sensor/one")
                                .build()
                             .build()}

connected

write zilla:data.ext ${mqtt:dataEx()
                            .typeId(zilla:id("mqtt"))
                            .publish()
                                .flags("RETAIN")
                                .format("TEXT")
                                .build()
                            .build()}

write "message"
write flush
write notify SENT_RETAIN_DATA

connect await SENT_RETAIN_DATA
        "zilla://streams/app0"
         option zilla:window 8192
         option zilla:transmission "duplex"
         option zilla:affinity 0xc2

write zilla:begin.ext ${mqtt:beginEx()
                              .typeId(zilla:id("mqtt"))
                              .session()
                                .flags("CLEAN_START")
                                .clientId("client2")
                                .build()
                              .build()}

read zilla:begin.ext ${mqtt:matchBeginEx()
                              .typeId(zilla:id("mqtt"))
                              .session()
                                .flags("CLEAN_START")
                                .qosMax(2)
                                .packetSizeMax(66560)
                                .capabilities("RETAIN", "WILDCARD", "SUBSCRIPTION_IDS", "SHARED_SUBSCRIPTIONS")
                                .clientId("client2")
                                .build()
                              .build()}

connected

read zilla:data.empty

write zilla:data.ext ${mqtt:dataEx()
                             .typeId(zilla:id("mqtt"))
                             .session()
                                .kind("STATE")
                                .build()
                             .build()}

write ${mqtt:session()
               .subscription("sensor/one", 1, "AT_MOST_ONCE", "SEND_RETAINED")
               .build()}
write flush

read ${mqtt:session()
               .subscription("sensor/one", 1, "AT_MOST_ONCE", "SEND_RETAINED")
               .build()}
read notify RECEIVED_SESSION_STATE2


connect await RECEIVED_SESSION_STATE2
        "zilla://streams/app0"
         option zilla:window 8192
         option zilla:transmission "duplex"
         option zilla:affinity 0xc2

write zilla:begin.ext ${mqtt:beginEx()
                             .typeId(zilla:id("mqtt"))
                             .subscribe()
                                .clientId("client2")
                                .filter("sensor/one", 1, "AT_MOST_ONCE", "SEND_RETAINED")
                                .build()
                             .build()}

connected

read zilla:data.ext ${mqtt:matchDataEx()
                             .typeId(zilla:id("mqtt"))
                             .subscribe()
                                 .topic("sensor/one")
                                 .subscriptionId(1)
                                 .format("TEXT")
                                 .build()
                             .build()}

read "message"
