#
# Copyright 2021-2023 Aklivity Inc.
#
# Aklivity licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

property padding 288

connect "zilla://streams/net0"
  option zilla:window ${18 + padding}
  option zilla:transmission "half-duplex"

write zilla:begin.ext ${http:beginEx()
                            .typeId(zilla:id("http"))
                            .header(":method", "GET")
                            .header(":scheme", "http")
                            .header(":authority", "localhost:8080")
                            .header(":path", "/events/a8b7c6d5")
                            .header("accept", "text/event-stream")
                            .build()}

connected

write close

read zilla:begin.ext ${http:beginEx()
                           .typeId(zilla:id("http"))
                           .header(":status", "200")
                           .header("content-type", "text/event-stream")
                           .build()}
          
read "id:" 
read [0..254] 
read "\n" "event:" 
read [0..16] 
read "\n"                   
read "data:Hello, world\n"
read "\n"

read "id:105\n"
read "\n"

read notify RECONNECT_EVENT_STREAM
read closed

connect await RECONNECT_EVENT_STREAM
        "zilla://streams/net0"
  option zilla:window 8192
  option zilla:transmission "half-duplex"

write zilla:begin.ext ${http:beginEx()
                            .typeId(zilla:id("http"))
                            .header(":method", "GET")
                            .header(":scheme", "http")
                            .header(":authority", "localhost:8080")
                            .header(":path", "/events/a8b7c6d5")
                            .header("accept", "text/event-stream")
                            .header("last-event-id", "105")
                            .build()}

connected

write close

read zilla:begin.ext ${http:beginEx()
                           .typeId(zilla:id("http"))
                           .header(":status", "200")
                           .header("content-type", "text/event-stream")
                           .build()}
