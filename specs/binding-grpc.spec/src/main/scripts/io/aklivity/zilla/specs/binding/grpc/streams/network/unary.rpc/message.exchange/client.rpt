#
# Copyright 2021-2023 Aklivity Inc
#
# Licensed under the Aklivity Community License (the "License"); you may not use
# this file except in compliance with the License.  You may obtain a copy of the
# License at
#
#   https://www.aklivity.io/aklivity-community-license/
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#

connect "zilla://streams/net0"
  option zilla:window 8192
  option zilla:transmission "half-duplex"

write zilla:begin.ext ${http:beginEx()
                            .typeId(zilla:id("http"))
                            .header(":method", "POST")
                            .header(":scheme", "http")
                            .header(":authority", "localhost:8080")
                            .header(":path", "/example.EchoService/EchoUnary")
                            .header("content-type", "application/grpc")
                            .header("te", "trailers")
                            .header("custom", "test")
                            .build()}

connected

write ${grpc:message()
            .string(1, "Hello World")
            .build()}
write flush

write close

read zilla:begin.ext ${http:matchBeginEx()
                           .typeId(zilla:id("http"))
                           .header(":status", "200")
                           .header("content-type", "application/grpc")
                           .header("grpc-encoding", "identity")
                           .build()}

read ${grpc:message()
           .string(1, "Hello World")
           .build()}

read zilla:end.ext ${http:endEx()
                         .typeId(zilla:id("http"))
                         .trailer("grpc-status", "0")
                         .build()}
read closed
