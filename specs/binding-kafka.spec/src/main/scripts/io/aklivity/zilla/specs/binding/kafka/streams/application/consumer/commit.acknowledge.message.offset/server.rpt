#
# Copyright 2021-2023 Aklivity Inc.
#
# Aklivity licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

property serverAddress "zilla://streams/app1"

accept ${serverAddress}
    option zilla:window 8192
    option zilla:transmission "half-duplex"

accepted

read zilla:begin.ext ${kafka:matchBeginEx()
                               .typeId(zilla:id("kafka"))
                               .group()
                                   .groupId("client-1")
                                   .protocol("highlander")
                                   .timeout(45000)
                                   .metadata(kafka:memberMetadata()
                                        .consumerId("consumer-1")
                                        .topic("test")
                                           .partitionId(0)
                                           .partitionId(1)
                                           .build()
                                        .build())
                                   .build()
                               .build()}

connected

write zilla:begin.ext ${kafka:beginEx()
                               .typeId(zilla:id("kafka"))
                               .group()
                                   .groupId("client-1")
                                   .protocol("highlander")
                                   .instanceId("zilla")
                                   .timeout(30000)
                                   .build()
                               .build()}
write flush

write advise zilla:flush ${kafka:flushEx()
                             .typeId(zilla:id("kafka"))
                             .group()
                                 .generationId(0)
                                 .leaderId("memberId-1")
                                 .memberId("memberId-1")
                                 .members("memberId-1", kafka:memberMetadata()
                                    .consumerId("consumer-1")
                                    .topic("test")
                                       .partitionId(0)
                                       .partitionId(1)
                                       .build()
                                  .build())
                                  .members("memberId-2", kafka:memberMetadata()
                                     .consumerId("consumer-2")
                                     .topic("test")
                                        .partitionId(0)
                                        .partitionId(1)
                                        .build()
                                   .build())
                              .build()
                             .build()}

read ${kafka:memberAssignment()
          .member("memberId-1")
              .assignment()
                  .topic("test")
                  .partitionId(1)
                  .consumer()
                      .id("consumer-1")
                      .partitionId(1)
                      .build()
                  .consumer()
                      .id("consumer-2")
                      .partitionId(0)
                      .build()
                  .build()
              .build()
          .member("memberId-2")
              .assignment()
                  .topic("test")
                  .partitionId(0)
                  .consumer()
                      .id("consumer-1")
                      .partitionId(1)
                      .build()
                  .consumer()
                      .id("consumer-2")
                      .partitionId(0)
                      .build()
                  .build()
              .build()
          .build()}

write ${kafka:topicAssignment()
                .topic()
                    .id("test")
                    .partitionId(0)
                    .consumer()
                        .id("consumer-1")
                        .partitionId(0)
                        .build()
                    .consumer()
                       .id("consumer-2")
                       .partitionId(1)
                       .build()
                    .build()
                .build()}
write flush

accepted

read zilla:begin.ext ${kafka:beginEx()
                               .typeId(zilla:id("kafka"))
                               .offsetCommit()
                                   .topic("test")
                                   .groupId("client-1")
                                   .memberId("memberId-1")
                                   .instanceId("zilla")
                                   .build()
                               .build()}

connected

read zilla:data.ext ${kafka:dataEx()
                             .typeId(zilla:id("kafka"))
                             .offsetCommit()
                                 .partition(0, 2, "test-meta")
                                 .generationId(0)
                                 .leaderEpoch(0)
                                 .build()
                             .build()}
read zilla:data.empty
