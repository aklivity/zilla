#
# Copyright 2021-2023 Aklivity Inc.
#
# Aklivity licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

connect "zilla://streams/app0"
    option zilla:window 8192
    option zilla:transmission "half-duplex"

write zilla:begin.ext ${kafka:beginEx()
                               .typeId(zilla:id("kafka"))
                               .merged()
                                   .capabilities("FETCH_ONLY")
                                   .topic("test")
                                   .groupId("client-1")
                                   .consumerId("consumer-1")
                                   .timeout(45000)
                                   .partition(0, 1)
                                   .partition(1, 1)
                                   .partition(-1, 1)
                                   .build()
                               .build()}

connected

read zilla:data.ext ${kafka:matchDataEx()
                             .typeId(zilla:id("kafka"))
                             .merged()
                                .fetch()
                                 .partition(0, 2, 2)
                                 .progress(0, 3)
                                 .build()
                             .build()}
read "Hello, world #A1"

write advise zilla:flush ${kafka:flushEx()
                              .typeId(zilla:id("kafka"))
                              .merged()
                                .consumer()
                                  .partition(0, 2, "test-meta")
                                  .correlationId(1)
                                  .build()
                              .build()}

read advised zilla:flush ${kafka:matchFlushEx()
                              .typeId(zilla:id("kafka"))
                              .merged()
                                .consumer()
                                  .partition(0, 2)
                                  .correlationId(1)
                                  .build()
                              .build()}
