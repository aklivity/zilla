#
# Copyright 2021-2023 Aklivity Inc.
#
# Aklivity licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

property deltaMillis 0L
property newTimestamp ${kafka:timestamp() + deltaMillis}

accept "zilla://streams/app0"
    option zilla:window 8192
    option zilla:transmission "duplex"

accepted

read zilla:begin.ext ${kafka:beginEx()
                              .typeId(zilla:id("kafka"))
                              .merged()
                                  .capabilities("FETCH_ONLY")
                                  .topic("test")
                                  .partition(0, 1, -2)
                                  .partition(1, 1, -2)
                                  .build()
                              .build()}

connected

write zilla:data.ext ${kafka:dataEx()
                              .typeId(zilla:id("kafka"))
                              .merged()
                                .fetch()
                                  .timestamp(newTimestamp)
                                  .partition(0, 1, 2)
                                  .progress(0, 2)
                                  .progress(1, 1)
                                  .key("key1")
                                  .header("header2", "value2")
                                  .build()
                              .build()}
write "Hello, world #A1"
write flush

write zilla:data.ext ${kafka:dataEx()
                              .typeId(zilla:id("kafka"))
                              .merged()
                                .fetch()
                                  .partition(1, 1, 2)
                                  .progress(0, 2)
                                  .progress(1, 2)
                                  .header("header1", "value1")
                                  .header("header2", "value2")
                                  .build()
                              .build()}
write "Hello, world #B1"
write flush

write zilla:data.ext ${kafka:dataEx()
                              .typeId(zilla:id("kafka"))
                              .merged()
                                .fetch()
                                  .timestamp(newTimestamp)
                                  .partition(0, 2, 2)
                                  .progress(0, 3)
                                  .progress(1, 2)
                                  .header("header1", "value1")
                                  .build()
                              .build()}
write "Hello, world #A2"
write flush

write zilla:data.ext ${kafka:dataEx()
                              .typeId(zilla:id("kafka"))
                              .merged()
                                .fetch()
                                  .partition(1, 2, 2)
                                  .progress(0, 3)
                                  .progress(1, 3)
                                  .key("key1")
                                  .header("header1", "value1")
                                  .build()
                              .build()}
write "Hello, world #B2"
write flush

write close

read closed
