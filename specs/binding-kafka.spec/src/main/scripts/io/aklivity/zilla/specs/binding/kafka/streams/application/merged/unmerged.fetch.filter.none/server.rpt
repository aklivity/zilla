#
# Copyright 2021-2023 Aklivity Inc.
#
# Aklivity licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

property deltaMillis 0L
property newTimestamp ${kafka:timestamp() + deltaMillis}

accept "zilla://streams/app1"
    option zilla:window 8192
    option zilla:transmission "half-duplex"

accepted

read zilla:begin.ext ${kafka:beginEx()
                              .typeId(zilla:id("kafka"))
                              .describe()
                                  .topic("test")
                                  .config("cleanup.policy")
                                  .config("max.message.bytes")
                                  .config("segment.bytes")
                                  .config("segment.index.bytes")
                                  .config("segment.ms")
                                  .config("retention.bytes")
                                  .config("retention.ms")
                                  .config("delete.retention.ms")
                                  .config("min.compaction.lag.ms")
                                  .config("max.compaction.lag.ms")
                                  .config("min.cleanable.dirty.ratio")
                                  .build()
                              .build()}

connected

write zilla:begin.ext ${kafka:beginEx()
                               .typeId(zilla:id("kafka"))
                               .describe()
                                   .topic("test")
                                   .config("cleanup.policy")
                                   .config("max.message.bytes")
                                   .config("segment.bytes")
                                   .config("segment.index.bytes")
                                   .config("segment.ms")
                                   .config("retention.bytes")
                                   .config("retention.ms")
                                   .config("delete.retention.ms")
                                   .config("min.compaction.lag.ms")
                                   .config("max.compaction.lag.ms")
                                   .config("min.cleanable.dirty.ratio")
                                   .build()
                               .build()}
write flush

write zilla:data.ext ${kafka:dataEx()
                              .typeId(zilla:id("kafka"))
                              .describe()
                                  .config("cleanup.policy", "delete")
                                  .config("max.message.bytes", 1000012)
                                  .config("segment.bytes", 1073741824)
                                  .config("segment.index.bytes", 10485760)
                                  .config("segment.ms", 604800000)
                                  .config("retention.bytes", -1)
                                  .config("retention.ms", 604800000)
                                  .config("delete.retention.ms", 86400000)
                                  .config("min.compaction.lag.ms", 0)
                                  .config("max.compaction.lag.ms", 9223372036854775807)
                                  .config("min.cleanable.dirty.ratio", 0.5)
                                  .build()
                              .build()}
write flush

accepted

read zilla:begin.ext ${kafka:beginEx()
                              .typeId(zilla:id("kafka"))
                              .meta()
                                  .topic("test")
                                  .build()
                              .build()}

connected

write zilla:begin.ext ${kafka:beginEx()
                               .typeId(zilla:id("kafka"))
                               .meta()
                                   .topic("test")
                                   .build()
                               .build()}
write flush

write zilla:data.ext ${kafka:dataEx()
                              .typeId(zilla:id("kafka"))
                              .meta()
                                  .partition(0, 1)
                                  .partition(1, 2)
                                  .build()
                              .build()}
write flush

accepted

read zilla:begin.ext ${kafka:beginEx()
                              .typeId(zilla:id("kafka"))
                              .fetch()
                                  .topic("test")
                                  .partition(0, -2)
                                  .build()
                              .build()}

connected

write zilla:begin.ext ${kafka:beginEx()
                               .typeId(zilla:id("kafka"))
                               .fetch()
                                   .topic("test")
                                   .partition(0, 1, 2)
                                   .build()
                               .build()}
write flush

write zilla:data.ext ${kafka:dataEx()
                              .typeId(zilla:id("kafka"))
                              .fetch()
                                  .timestamp(newTimestamp)
                                  .partition(0, 1, 2)
                                  .key("key1")
                                  .header("header2", "value2")
                                  .build()
                              .build()}
write "Hello, world #A1"
write flush

write zilla:data.ext ${kafka:dataEx()
                              .typeId(zilla:id("kafka"))
                              .fetch()
                                  .timestamp(newTimestamp)
                                  .partition(0, 2, 2)
                                  .header("header1", "value1")
                                  .build()
                              .build()}
write "Hello, world #A2"
write flush

write await SEND_MESSAGE_A3

write zilla:data.ext ${kafka:dataEx()
                              .typeId(zilla:id("kafka"))
                              .fetch()
                                  .timestamp(newTimestamp)
                                  .partition(0, 3, 6)
                                  .key("key1")
                                  .header("header1", "value1")
                                  .build()
                              .build()}
write "Hello, world #A3"
write flush

write await SEND_MESSAGE_A4

write zilla:data.ext ${kafka:dataEx()
                              .typeId(zilla:id("kafka"))
                              .fetch()
                                  .timestamp(newTimestamp)
                                  .partition(0, 4, 6)
                                  .header("header1", "value1")
                                  .header("header2", "value2")
                                  .build()
                              .build()}
write "Hello, world #A4"
write flush
write notify SENT_MESSAGE_A4

write await SEND_MESSAGE_A5

write zilla:data.ext ${kafka:dataEx()
                              .typeId(zilla:id("kafka"))
                              .fetch()
                                  .timestamp(newTimestamp)
                                  .partition(0, 5, 6)
                                  .header("header3", "one")
                                  .build()
                              .build()}
write "Hello, world #A5"
write flush
write notify SENT_MESSAGE_A5

write await SEND_MESSAGE_A6

write zilla:data.ext ${kafka:dataEx()
                              .typeId(zilla:id("kafka"))
                              .fetch()
                                  .timestamp(newTimestamp)
                                  .partition(0, 6, 6)
                                  .header("header3", "one")
                                  .header("header3", "")
                                  .header("header3", "three")
                                  .header("header3", "")
                                  .build()
                              .build()}
write "Hello, world #A6"
write flush
write notify SENT_MESSAGE_A6

accepted

read zilla:begin.ext ${kafka:beginEx()
                              .typeId(zilla:id("kafka"))
                              .fetch()
                                  .topic("test")
                                  .partition(1, -2)
                                  .build()
                              .build()}

connected

write zilla:begin.ext ${kafka:beginEx()
                               .typeId(zilla:id("kafka"))
                               .fetch()
                                   .topic("test")
                                   .partition(1, 1, 2)
                                   .build()
                               .build()}
write flush

write zilla:data.ext ${kafka:dataEx()
                              .typeId(zilla:id("kafka"))
                              .fetch()
                                  .partition(1, 1, 2)
                                  .header("header1", "value1")
                                  .header("header2", "value2")
                                  .build()
                              .build()}
write "Hello, world #B1"
write flush

write zilla:data.ext ${kafka:dataEx()
                              .typeId(zilla:id("kafka"))
                              .fetch()
                                  .partition(1, 2, 2)
                                  .key("key1")
                                  .header("header1", "value1")
                                  .build()
                              .build()}
write "Hello, world #B2"
write flush

write await SEND_MESSAGE_B3

write zilla:data.ext ${kafka:dataEx()
                              .typeId(zilla:id("kafka"))
                              .fetch()
                                  .partition(1, 3, 6)
                                  .header("header1", "value1")
                                  .build()
                              .build()}
write "Hello, world #B3"
write flush

write await SENT_MESSAGE_A4
write zilla:data.ext ${kafka:dataEx()
                              .typeId(zilla:id("kafka"))
                              .fetch()
                                  .partition(1, 4, 6)
                                  .key("key1")
                                  .header("header2", "value2")
                                  .build()
                              .build()}
write "Hello, world #B4"
write flush
write notify SENT_MESSAGE_B4

write await SENT_MESSAGE_A5
write zilla:data.ext ${kafka:dataEx()
                              .typeId(zilla:id("kafka"))
                              .fetch()
                                  .partition(1, 5, 6)
                                  .header("header3", "one")
                                  .header("header3", "")
                                  .build()
                              .build()}
write "Hello, world #B5"
write flush

write await SENT_MESSAGE_A6
write zilla:data.ext ${kafka:dataEx()
                              .typeId(zilla:id("kafka"))
                              .fetch()
                                  .partition(1, 6, 6)
                                  .header("header3", "one")
                                  .header("header3", "two")
                                  .header("header3", "three")
                                  .header("header3", "four")
                                  .build()
                              .build()}
write "Hello, world #B6"
write flush
