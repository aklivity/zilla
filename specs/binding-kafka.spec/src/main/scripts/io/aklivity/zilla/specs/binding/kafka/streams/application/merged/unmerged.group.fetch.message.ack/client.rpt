#
# Copyright 2021-2023 Aklivity Inc.
#
# Aklivity licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

connect "zilla://streams/app1"
    option zilla:window 8192
    option zilla:transmission "half-duplex"

write zilla:begin.ext ${kafka:beginEx()
                               .typeId(zilla:id("kafka"))
                               .describe()
                                   .topic("test")
                                   .config("cleanup.policy")
                                   .config("max.message.bytes")
                                   .config("segment.bytes")
                                   .config("segment.index.bytes")
                                   .config("segment.ms")
                                   .config("retention.bytes")
                                   .config("retention.ms")
                                   .config("delete.retention.ms")
                                   .config("min.compaction.lag.ms")
                                   .config("max.compaction.lag.ms")
                                   .config("min.cleanable.dirty.ratio")
                                   .build()
                               .build()}

connected

read zilla:begin.ext ${kafka:beginEx()
                              .typeId(zilla:id("kafka"))
                              .describe()
                                  .topic("test")
                                  .config("cleanup.policy")
                                  .config("max.message.bytes")
                                  .config("segment.bytes")
                                  .config("segment.index.bytes")
                                  .config("segment.ms")
                                  .config("retention.bytes")
                                  .config("retention.ms")
                                  .config("delete.retention.ms")
                                  .config("min.compaction.lag.ms")
                                  .config("max.compaction.lag.ms")
                                  .config("min.cleanable.dirty.ratio")
                                  .build()
                              .build()}

read zilla:data.ext ${kafka:dataEx()
                             .typeId(zilla:id("kafka"))
                             .describe()
                                 .config("cleanup.policy", "delete")
                                 .config("max.message.bytes", 1000012)
                                 .config("segment.bytes", 1073741824)
                                 .config("segment.index.bytes", 10485760)
                                 .config("segment.ms", 604800000)
                                 .config("retention.bytes", -1)
                                 .config("retention.ms", 604800000)
                                 .config("delete.retention.ms", 86400000)
                                 .config("min.compaction.lag.ms", 0)
                                 .config("max.compaction.lag.ms", 9223372036854775807)
                                 .config("min.cleanable.dirty.ratio", 0.5)
                                 .build()
                             .build()}

read notify RECEIVED_CONFIG

connect await RECEIVED_CONFIG
        "zilla://streams/app1"
    option zilla:window 8192
    option zilla:transmission "half-duplex"

write zilla:begin.ext ${kafka:beginEx()
                               .typeId(zilla:id("kafka"))
                               .meta()
                                   .topic("test")
                                   .build()
                               .build()}

connected

read zilla:begin.ext ${kafka:beginEx()
                              .typeId(zilla:id("kafka"))
                              .meta()
                                  .topic("test")
                                  .build()
                              .build()}

read zilla:data.ext ${kafka:dataEx()
                             .typeId(zilla:id("kafka"))
                             .meta()
                                 .partition(0, 1)
                                 .partition(1, 2)
                                 .build()
                             .build()}


read notify PARTITION_COUNT_2

connect await PARTITION_COUNT_2
        "zilla://streams/app1"
    option zilla:window 8192
    option zilla:transmission "half-duplex"

write zilla:begin.ext ${kafka:beginEx()
                              .typeId(zilla:id("kafka"))
                              .group()
                                 .groupId("client-1")
                                 .protocol("highlander")
                                 .timeout(45000)
                                 .metadata(kafka:memberMetadata()
                                      .consumerId("consumer-1")
                                      .topic("test")
                                         .partitionId(0)
                                         .partitionId(1)
                                         .build()
                                      .build())
                                 .build()
                              .build()}

connected

read zilla:begin.ext ${kafka:matchBeginEx()
                               .typeId(zilla:id("kafka"))
                               .group()
                                   .groupId("client-1")
                                   .protocol("highlander")
                                   .timeout(30000)
                                   .build()
                               .build()}

read advised zilla:flush ${kafka:flushEx()
                             .typeId(zilla:id("kafka"))
                             .group()
                                 .generationId(0)
                                 .leaderId("memberId-1")
                                 .memberId("memberId-1")
                                 .members("memberId-1", kafka:memberMetadata()
                                     .consumerId("consumer-1")
                                     .topic("test")
                                        .partitionId(0)
                                        .partitionId(1)
                                        .build()
                                     .build())
                                .build()
                             .build()}

write ${kafka:memberAssignment()
          .member("memberId-1")
            .assignment()
              .topic("test")
              .partitionId(0)
              .partitionId(1)
              .consumer()
                 .id("consumer-1")
                 .partitionId(0)
                 .partitionId(1)
                 .build()
              .build()
            .build()
           .build()}
write flush

read ${kafka:topicAssignment()
                .topic()
                  .id("test")
                  .partitionId(0)
                  .consumer()
                    .id("consumer-1")
                    .partitionId(0)
                    .build()
                  .build()
              .build()}

read notify RECEIVED_CONSUMER

connect await RECEIVED_CONSUMER
        "zilla://streams/app1"
    option zilla:window 8192
    option zilla:transmission "half-duplex"

write zilla:begin.ext ${kafka:beginEx()
                               .typeId(zilla:id("kafka"))
                               .offsetFetch()
                                   .groupId("client-1")
                                   .topic("test")
                                   .partition(0)
                                   .build()
                               .build()}

connected

read zilla:data.ext ${kafka:dataEx()
                             .typeId(zilla:id("kafka"))
                             .offsetFetch()
                                    .partition(0, 1, 0, "test-meta")
                                .build()
                             .build()}
read zilla:data.empty

read notify RECEIVED_OFFSET_FETCH

connect await RECEIVED_OFFSET_FETCH
        "zilla://streams/app1"
    option zilla:window 8192
    option zilla:transmission "half-duplex"

write zilla:begin.ext ${kafka:beginEx()
                               .typeId(zilla:id("kafka"))
                               .fetch()
                                   .topic("test")
                                   .partition(0, -2)
                                   .build()
                               .build()}

connected

read zilla:begin.ext ${kafka:beginEx()
                              .typeId(zilla:id("kafka"))
                              .fetch()
                                  .topic("test")
                                  .partition(0, 2, 2)
                                  .build()
                              .build()}

read zilla:data.ext ${kafka:matchDataEx()
                             .typeId(zilla:id("kafka"))
                             .fetch()
                                 .partition(0, 2, 2)
                                 .build()
                             .build()}
read "Hello, world #A1"

read notify RECEIVED_MESSAGE

connect await RECEIVED_MESSAGE
    "zilla://streams/app1"
    option zilla:window 8192
    option zilla:transmission "half-duplex"

write zilla:begin.ext ${kafka:beginEx()
                               .typeId(zilla:id("kafka"))
                               .offsetCommit()
                                   .topic("test")
                                   .groupId("client-1")
                                   .memberId("memberId-1")
                                   .instanceId("zilla")
                                   .build()
                               .build()}

connected

write zilla:data.ext ${kafka:dataEx()
                             .typeId(zilla:id("kafka"))
                             .offsetCommit()
                                 .partition(0, 2, "test-meta")
                                 .generationId(0)
                                 .leaderEpoch(0)
                                 .build()
                             .build()}
write zilla:data.empty
write flush



