/*
 * Copyright 2021-2023 Aklivity Inc.
 *
 * Aklivity licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
scope kafka
{
    struct KafkaConfig
    {
        string16 name;
        string16 value;
    }

    struct KafkaPartition
    {
        int32 partitionId;
        int32 leaderId;
    }

    struct KafkaOffset
    {
        int32 partitionId = -1;
        int64 partitionOffset = -1;
        int64 stableOffset = -1;
        int64 latestOffset = -1;
        string16 metadata = null;
    }

    enum KafkaTransactionResult
    {
        ABORT,
        COMMIT
    }

    struct KafkaTransaction
    {
        KafkaTransactionResult result;
        int64 producerId = -1;
    }

    enum KafkaConditionType (uint8)
    {
        KEY (0),
        HEADER (1),
        NOT (2),
        HEADERS (3)
    }

    union KafkaCondition switch (uint8)
    {
        case 0: kafka::KafkaKey key;
        case 1: kafka::KafkaHeader header;
        case 2: kafka::KafkaNot not;
        case 3: kafka::KafkaHeaders headers;
    }

    enum KafkaEvaluation (uint8)
    {
        LAZY(0),
        EAGER(1)
    }

    struct KafkaFilter
    {
        KafkaCondition[] conditions; // ANDed
    }

    struct KafkaKey
    {
        varint32 length;
        octets[length] value = null;
    }

    struct KafkaHeader
    {
        varint32 nameLen;
        octets[nameLen] name;  // UTF-8
        varint32 valueLen;
        octets[valueLen] value = null;
    }

    struct KafkaNot
    {
        KafkaCondition condition;
    }

    struct KafkaValue
    {
        varint32 length;
        octets[length] value = null;
    }

    enum KafkaSkip (uint8)
    {
        SKIP (0),
        SKIP_MANY (1)
    }

    enum KafkaValueMatchType (uint8)
    {
        VALUE (0),
        SKIP (1)
    }

    union KafkaValueMatch switch (uint8)
    {
        case 0: kafka::KafkaValue value;
        case 1: kafka::KafkaSkip skip;
    }

    struct KafkaHeaders
    {
        varint32 nameLen;
        octets[nameLen] name;  // UTF-8
        KafkaValueMatch[] values;
    }

    enum KafkaIsolation
    {
        READ_UNCOMMITTED,
        READ_COMMITTED
    }

    enum KafkaDeltaType
    {
        NONE,
        JSON_PATCH
    }

    enum KafkaOffsetType (int8)
    {
        LIVE(-1),
        HISTORICAL(-2)
    }

    struct KafkaDelta
    {
        KafkaDeltaType type = NONE;
        int64 ancestorOffset = -1;
    }

    enum KafkaAckMode (int16)
    {
        NONE(0),
        LEADER_ONLY(1),
        IN_SYNC_REPLICAS(-1)
    }

    enum KafkaCapabilities (uint8)
    {
        PRODUCE_ONLY(1),
        FETCH_ONLY(2),
        PRODUCE_AND_FETCH(3)
    }

    scope stream
    {
        enum KafkaApi (uint8)
        {
            CONSUMER (252),
            GROUP (253),
            BOOTSTRAP (254),
            MERGED (255),
            META (3),
            OFFSET_COMMIT (8),
            OFFSET_FETCH (9),
            DESCRIBE (32),
            FETCH (1),
            PRODUCE (0)
        }

        union KafkaBeginEx switch (uint8) extends core::stream::Extension
        {
            case 252: kafka::stream::KafkaConsumerBeginEx consumer;
            case 253: kafka::stream::KafkaGroupBeginEx group;
            case 254: kafka::stream::KafkaBootstrapBeginEx bootstrap;
            case 255: kafka::stream::KafkaMergedBeginEx merged;
            case 3: kafka::stream::KafkaMetaBeginEx meta;
            case 8: kafka::stream::KafkaOffsetCommitBeginEx offsetCommit;
            case 9: kafka::stream::KafkaOffsetFetchBeginEx offsetFetch;
            case 32: kafka::stream::KafkaDescribeBeginEx describe;
            case 1: kafka::stream::KafkaFetchBeginEx fetch;
            case 0: kafka::stream::KafkaProduceBeginEx produce;
        }

        union KafkaDataEx switch (uint8) extends core::stream::Extension
        {
            case 252: kafka::stream::KafkaConsumerDataEx consumer;
            case 255: kafka::stream::KafkaMergedDataEx merged;
            case 3: kafka::stream::KafkaMetaDataEx meta;
            case 8: kafka::stream::KafkaOffsetCommitDataEx offsetCommit;
            case 9: kafka::stream::KafkaOffsetFetchDataEx offsetFetch;
            case 32: kafka::stream::KafkaDescribeDataEx describe;
            case 1: kafka::stream::KafkaFetchDataEx fetch;
            case 0: kafka::stream::KafkaProduceDataEx produce;
        }

        union KafkaFlushEx switch (uint8) extends core::stream::Extension
        {
            case 252: kafka::stream::KafkaConsumerFlushEx consumer;
            case 253: kafka::stream::KafkaGroupFlushEx group;
            case 255: kafka::stream::KafkaMergedFlushEx merged;
            case 1: kafka::stream::KafkaFetchFlushEx fetch;
            case 0: kafka::stream::KafkaProduceFlushEx produce;
        }

        struct KafkaResetEx extends core::stream::Extension
        {
            int32 error = 0;
            string16 consumerId = null;
        }

        struct KafkaBootstrapBeginEx
        {
            string16 topic;
            string16 groupId = null;
            string16 consumerId = null;
            int32 timeout = 0;
        }

        struct KafkaMergedBeginEx
        {
            KafkaCapabilities capabilities = PRODUCE_AND_FETCH;
            string16 topic;
            string16 groupId = null;
            string16 consumerId = null;
            int32 timeout = 0;
            KafkaOffset[] partitions;
            KafkaFilter[] filters; // ORed
            KafkaEvaluation evaluation = LAZY;
            KafkaIsolation isolation = READ_COMMITTED;
            KafkaDeltaType deltaType = NONE;
            KafkaAckMode ackMode = IN_SYNC_REPLICAS;
        }

        union KafkaMergedDataEx switch (uint8)
        {
            case 1: kafka::stream::KafkaMergedFetchDataEx fetch;
            case 0: kafka::stream::KafkaMergedProduceDataEx produce;
        }

        struct KafkaMergedProduceDataEx
        {
            int32 deferred = 0;         // INIT only (TODO: move to DATA frame)
            int64 timestamp = 0;        // INIT only
            KafkaOffset partition;      // INIT only
            KafkaKey key;               // INIT only
            KafkaKey hashKey;           // INIT only
            KafkaHeader[] headers;      // INIT + FIN
        }

        struct KafkaMergedFetchDataEx
        {
            int32 deferred = 0;         // INIT only (TODO: move to DATA frame)
            int64 timestamp = 0;        // INIT only
            int64 filters = -1;         // INIT only
            KafkaOffset partition;      // INIT only
            KafkaOffset[] progress;     // INIT only
            KafkaKey key;               // INIT only
            KafkaDelta delta;           // INIT + FIN
            KafkaHeader[] headers;      // INIT + FIN
        }

        union KafkaMergedFlushEx switch (uint8)
        {
            case 252: kafka::stream::KafkaMergedConsumerFlushEx consumer;
            case 1: kafka::stream::KafkaMergedFetchFlushEx fetch;
        }

        struct KafkaMergedConsumerFlushEx
        {
            KafkaOffset partition;
        }

        struct KafkaMergedFetchFlushEx
        {
            KafkaOffset partition;
            KafkaOffset[] progress;
            KafkaCapabilities capabilities = PRODUCE_AND_FETCH;
            KafkaFilter[] filters;
            KafkaKey key;
        }

        struct KafkaMetaBeginEx
        {
            string16 topic;
        }

        struct KafkaMetaDataEx
        {
            KafkaPartition[] partitions;
        }

        struct KafkaDescribeBeginEx
        {
            string16 topic;
            string16[] configs;
        }

        struct KafkaDescribeDataEx
        {
            KafkaConfig[] configs;
        }

        struct KafkaFetchBeginEx
        {
            string16 topic;
            KafkaOffset partition;
            KafkaFilter[] filters; // ORed
            KafkaEvaluation evaluation = LAZY;
            KafkaIsolation isolation = READ_UNCOMMITTED;
            KafkaDeltaType deltaType = NONE;
        }

        struct KafkaFetchDataEx
        {
            int32 deferred = 0;         // INIT only (TODO: move to DATA frame)
            int64 timestamp = 0;        // INIT only
            int32 headersSizeMax = 4;   // INIT only
            int64 producerId = -1;      // INIT only
            int64 filters = -1;         // INIT only
            KafkaOffset partition;      // INIT only
            KafkaKey key;               // INIT only
            KafkaDelta delta;           // INIT + FIN
            KafkaHeader[] headers;      // FIN only
        }

        struct KafkaFetchFlushEx
        {
            KafkaOffset partition;
            KafkaTransaction[] transactions;
            KafkaFilter[] filters; // ORed
            KafkaEvaluation evaluation = LAZY;
        }

        struct KafkaProduceFlushEx
        {
            KafkaOffset partition;
            KafkaKey key;
            int32 error = 0;
        }

        struct KafkaProduceBeginEx
        {
            string8 transaction; // = null;
            int64 producerId = -1;
            string16 topic;
            KafkaOffset partition;
        }

        struct KafkaProduceDataEx
        {
            int32 deferred = 0;
            int64 timestamp = 0;
            int32 sequence = -1;
            uint32 crc32c = 0;
            KafkaAckMode ackMode = IN_SYNC_REPLICAS;
            KafkaKey key;
            KafkaHeader[] headers;
        }

        struct KafkaTopicPartition
        {
            int32 partitionId;
        }

        struct KafkaTopicPartitionOffset
        {
            int32 partitionId = -1;
            int64 partitionOffset = -1;
            int32 leaderEpoch;
            string16 metadata;
        }

        struct KafkaGroupTopicMetadata
        {
            string16 topic;
            KafkaTopicPartition[] partitions;
        }

        struct KafkaGroupMemberMetadata
        {
            string16 consumerId;
            KafkaGroupTopicMetadata[] topics;
        }

        struct KafkaGroupBeginEx
        {
            string16 groupId;
            string16 protocol;
            string16 instanceId = null;
            int32 timeout;
            varint32 metadataLen;
            octets[metadataLen] metadata = null;
        }

        struct KafkaGroupMember
        {
            string16 id;
            varint32 metadataLen;
            octets[metadataLen] metadata = null;
        }

        struct KafkaGroupFlushEx
        {
            int32 generationId = -1;
            string16 leaderId;
            string16 memberId;
            KafkaGroupMember[] members;
        }

        struct KafkaConsumerBeginEx
        {
            string16 groupId;
            string16 consumerId;
            int32 timeout;
            string16 topic;
            KafkaTopicPartition[] partitionIds;
        }

        struct KafkaConsumerAssignment
        {
            string16 consumerId;
            KafkaTopicPartition[] partitions;
        }

        struct KafkaConsumerDataEx
        {
            KafkaTopicPartition[] partitions;
            KafkaConsumerAssignment[] assignments;
        }

        struct KafkaConsumerFlushEx
        {
            KafkaOffset partition;
            int32 leaderEpoch = -1;
        }

        struct KafkaOffsetFetchTopic
        {
            string16 topic;
            KafkaTopicPartition[] partitions;
        }

        struct KafkaOffsetFetchBeginEx
        {
            string16 groupId;
            string16 topic;
            KafkaTopicPartition[] partitions;
        }

        struct KafkaOffsetFetchDataEx
        {
            KafkaTopicPartitionOffset[] partitions;
        }

        struct KafkaOffsetCommitBeginEx
        {
            string16 topic;
            string16 groupId;
            string16 memberId;
            string16 instanceId;
        }

        struct KafkaOffsetCommitDataEx
        {
            KafkaOffset partition;
            int32 generationId;
            int32 leaderEpoch;
        }
    }

    scope rebalance
    {
        struct TopicPartition
        {
            int32 partitionId;
        }

        struct ConsumerAssignment
        {
            string16 consumerId;
            TopicPartition[] partitions;
        }

        struct TopicAssignment
        {
            string16 topic;
            TopicPartition[] partitions;
            ConsumerAssignment[] userdata;
        }

        struct MemberAssignment
        {
            string16 memberId;
            TopicAssignment[] assignments;
        }

        struct PartitionIndex
        {
            int32 index;
        }
    }
}
