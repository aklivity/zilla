/*
 * Copyright 2021-2024 Aklivity Inc
 *
 * Licensed under the Aklivity Community License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at
 *
 *   https://www.aklivity.io/aklivity-community-license/
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */
scope mqtt_kafka
{
    enum MqttSubscribeOffsetMetadataVersion (uint8)
    {
        V1 (1),
        V2 (2)
    }

    struct MqttSubscribeOffsetMetadataV1
    {
         int8 length;
         int16[length] packetIds = null;
    }

    struct MqttSubscribeOffsetMetadataV2
    {
         int16 length;
         int16[length] packetIds = null;
    }

    union MqttSubscribeOffsetMetadata switch (MqttSubscribeOffsetMetadataVersion)
    {
        case V1: MqttSubscribeOffsetMetadataV1 subscribeMetadataV1;
        case V2: MqttSubscribeOffsetMetadataV2 subscribeMetadataV2;
    }

    struct MqttPublishOffsetMetadata
    {
         uint8 version = 1;
         int64 producerId = 0;
         int16 producerEpoch = 0;
         int8 length;
         int16[length] packetIds = null;
    }

    scope event
    {
        enum MqttKafkaEventType (uint8)
        {
            NON_COMPACT_SESSIONS_TOPIC (1)
        }

        struct MqttKafkaNonCompactSessionsTopicEx extends core::stream::Extension
        {
            string16 topic;
        }

        union MqttKafkaEventEx switch (MqttKafkaEventType)
        {
            case NON_COMPACT_SESSIONS_TOPIC: MqttKafkaNonCompactSessionsTopicEx nonCompactSessionsTopic;
        }
    }
}