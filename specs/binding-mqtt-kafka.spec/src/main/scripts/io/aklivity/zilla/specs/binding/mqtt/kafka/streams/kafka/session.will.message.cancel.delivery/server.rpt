#
# Copyright 2021-2023 Aklivity Inc
#
# Licensed under the Aklivity Community License (the "License"); you may not use
# this file except in compliance with the License.  You may obtain a copy of the
# License at
#
#   https://www.aklivity.io/aklivity-community-license/
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#

property delayMillis 2000L
property deliverAt ${mqtt:timestamp() + delayMillis}

accept "zilla://streams/kafka0"
        option zilla:window 8192
        option zilla:transmission "duplex"


accepted

read zilla:begin.ext ${kafka:matchBeginEx()
                            .typeId(zilla:id("kafka"))
                            .merged()
                                .capabilities("PRODUCE_AND_FETCH")
                                .topic("mqtt-sessions")
                                .groupId("mqtt-clients")
                                .filter()
                                    .header("type", "will-signal")
                                    .build()
                                .filter()
                                    .header("type", "expiry-signal")
                                    .build()
                                .build()
                            .build()}

connected

write zilla:data.ext ${kafka:dataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .fetch()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1#will-signal")
                               .header("type", "will-signal")
                               .build()
                           .build()}
write ${mqtt:sessionSignal()
            .will()
                .instanceId("zilla-1")
                .clientId("client-1")
                .delay(1000)
                .deliverAt(deliverAt)
                .lifetimeId("1e6a1eb5-810a-459d-a12c-a6fa08f228d1")
                .willId("d252a6bd-abb5-446a-b0f7-d0a3d8c012e2")
                .build()
            .build()}
write flush

write await ONE_SECOND_ELAPSED
write zilla:data.ext ${kafka:dataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .fetch()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1#will-signal")
                               .header("type", "will-signal")
                               .build()
                           .build()}
write flush

accepted

read zilla:begin.ext ${kafka:matchBeginEx()
                            .typeId(zilla:id("kafka"))
                            .merged()
                                .capabilities("FETCH_ONLY")
                                .topic("mqtt-sessions")
                                .filter()
                                    .key("client-1#will-1e6a1eb5-810a-459d-a12c-a6fa08f228d1")
                                    .build()
                                .build()
                            .build()}

connected

# send session will message for client-1
write zilla:data.ext ${kafka:dataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .fetch()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1#will-1e6a1eb5-810a-459d-a12c-a6fa08f228d1")
                               .build()
                           .build()}
write ${mqtt:will()
            .topic("obituaries")
            .delay(1000)
            .format("TEXT")
            .lifetimeId("1e6a1eb5-810a-459d-a12c-a6fa08f228d1")
            .willId("d252a6bd-abb5-446a-b0f7-d0a3d8c012e2")
            .payload("client-1 disconnected abruptly")
        .build()}
write flush

read closed
write close

accepted

read zilla:begin.ext ${kafka:beginEx()
                            .typeId(zilla:id("kafka"))
                            .merged()
                                .capabilities("PRODUCE_ONLY")
                                .topic("mqtt-messages")
                                .partition(-1, -2)
                                .ackMode("LEADER_ONLY")
                                .build()
                            .build()}


connected

read closed
write close

