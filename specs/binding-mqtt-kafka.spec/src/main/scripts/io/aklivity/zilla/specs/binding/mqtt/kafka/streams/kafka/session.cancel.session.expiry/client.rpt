#
# Copyright 2021-2023 Aklivity Inc
#
# Licensed under the Aklivity Community License (the "License"); you may not use
# this file except in compliance with the License.  You may obtain a copy of the
# License at
#
#   https://www.aklivity.io/aklivity-community-license/
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#

connect "zilla://streams/kafka0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${kafka:beginEx()
                            .typeId(zilla:id("kafka"))
                            .merged()
                                .capabilities("PRODUCE_AND_FETCH")
                                .topic("mqtt-sessions")
                                .groupId("mqtt-clients")
                                .filter()
                                    .header("type", "will-signal")
                                    .build()
                                .filter()
                                    .header("type", "expiry-signal")
                                    .build()
                                .build()
                            .build()}

connected

read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .fetch()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1#expiry-signal")
                               .header("type", "expiry-signal")
                               .build()
                           .build()}
read ${mqtt:sessionSignal()
            .expiry()
                .instanceId("zilla-1")
                .clientId("client-1")
                .delay(2000)
                .expireAt(expireAt)
                .build()
            .build()}

read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .fetch()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1#expiry-signal")
                               .header("type", "expiry-signal")
                               .build()
                           .build()}
read zilla:data.null

