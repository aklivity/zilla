#
# Copyright 2021-2023 Aklivity Inc
#
# Licensed under the Aklivity Community License (the "License"); you may not use
# this file except in compliance with the License.  You may obtain a copy of the
# License at
#
#   https://www.aklivity.io/aklivity-community-license/
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#

accept "zilla://streams/kafka0"
        option zilla:window 8192
        option zilla:transmission "duplex"


accepted

read zilla:begin.ext ${kafka:matchBeginEx()
                            .typeId(zilla:id("kafka"))
                            .merged()
                                .capabilities("PRODUCE_AND_FETCH")
                                .topic("mqtt-sessions")
                                .groupId("mqtt-clients")
                                .filter()
                                    .header("type", "will-signal")
                                    .build()
                                .filter()
                                    .header("type", "expiry-signal")
                                    .build()
                                .build()
                            .build()}

connected
read notify WILL_STREAM_STARTED

write await RECEIVED_WILL_CANCELLATION_SIGNAL
write zilla:data.ext ${kafka:dataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .fetch()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1#will-signal")
                               .header("type", "will-signal")
                               .build()
                           .build()}
write flush

write await RECEIVED_WILL_DELIVER_LATER_SIGNAL
write zilla:data.ext ${kafka:dataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .fetch()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1#will-signal")
                               .header("type", "will-signal")
                               .build()
                           .build()}
write ${mqtt:sessionSignal()
            .will()
                .instanceId("zilla-1")
                .clientId("client-1")
                .delay(1000)
                .deliverAt(-1)
                .lifetimeId("1e6a1eb5-810a-459d-a12c-a6fa08f228d1")
                .willId("d252a6bd-abb5-446a-b0f7-d0a3d8c012e2")
                .build()
            .build()}
write flush

# will signal for client-1, deliver at (now + delay)
write await RECEIVED_WILL_DELIVER_AT_SIGNAL
write zilla:data.ext ${kafka:dataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .fetch()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1#will-signal")
                               .header("type", "will-signal")
                               .build()
                           .build()}
write ${mqtt:sessionSignal()
            .will()
                .instanceId("zilla-1")
                .clientId("client-1")
                .delay(1000)
                .deliverAt(2000)
                .lifetimeId("1e6a1eb5-810a-459d-a12c-a6fa08f228d1")
                .willId("d252a6bd-abb5-446a-b0f7-d0a3d8c012e2")
                .build()
            .build()}
write flush

# cleanup will message
read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1#will-1e6a1eb5-810a-459d-a12c-a6fa08f228d1")
                               .hashKey("client-1")
                               .build()
                           .build()}
read zilla:data.null

# cleanup will signal
read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1#will-signal")
                               .hashKey("client-1")
                               .header("type", "will-signal")
                               .build()
                           .build()}
read zilla:data.null


# non-clean start
accepted

read zilla:begin.ext ${kafka:matchBeginEx()
                            .typeId(zilla:id("kafka"))
                            .merged()
                                .capabilities("FETCH_ONLY")
                                .topic("mqtt-sessions")
                                .groupId("mqtt-clients")
                                .filter()
                                    .key("client-1#will-signal")
                                    .build()
                                .build()
                            .build()}

connected

# no will signals
write advise zilla:flush

read closed
write close


accepted

read zilla:begin.ext ${kafka:matchBeginEx()
                            .typeId(zilla:id("kafka"))
                            .merged()
                                .capabilities("PRODUCE_AND_FETCH")
                                .topic("mqtt-sessions")
                                .groupId("mqtt-clients")
                                .filter()
                                    .key("client-1#migrate")
                                    .headerNot("sender-id", "sender-1")
                                    .build()
                                .build()
                            .build()}

connected
# receive sender-1 migrate signal

read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1#migrate")
                               .hashKey("client-1")
                               .header("sender-id", "sender-1")
                               .build()
                           .build()}
read zilla:data.empty

read closed
write close


accepted

read zilla:begin.ext ${kafka:matchBeginEx()
                               .typeId(zilla:id("kafka"))
                               .group()
                                   .groupId("client-1")
                                   .protocol("highlander")
                                   .timeout(1000)
                                   .build()
                               .build()}

connected

# send group members (leader)
write advise zilla:flush ${kafka:flushEx()
                             .typeId(zilla:id("kafka"))
                             .group()
                                 .leaderId("member-1")
                                 .memberId("member-1")
                                 .members("member-1")
                                 .build()
                             .build()}
write flush

read zilla:data.empty

write await RECEIVED_WILL_DELIVER_LATER_SIGNAL

write advise zilla:flush ${kafka:flushEx()
                             .typeId(zilla:id("kafka"))
                             .group()
                                 .leaderId("member-1")
                                 .memberId("member-1")
                                 .members("member-1")
                                 .members("member-2")
                                 .build()
                             .build()}
write flush

read closed


accepted

read zilla:begin.ext ${kafka:matchBeginEx()
                            .typeId(zilla:id("kafka"))
                            .merged()
                                .capabilities("PRODUCE_ONLY")
                                .topic("mqtt-sessions")
                                .groupId("mqtt-clients")
                                .filter()
                                    .key("client-1")
                                    .build()
                                .filter()
                                    .key("client-1#migrate")
                                    .headerNot("sender-id", "sender-1")
                                    .build()
                                .build()
                            .build()}

connected

# will delivery cancellation signal for client-1
read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1#will-signal")
                               .hashKey("client-1")
                               .header("type", "will-signal")
                               .build()
                           .build()}
read zilla:data.null
read notify RECEIVED_WILL_CANCELLATION_SIGNAL

# session expiry cancellation signal for client-1
read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1#expiry-signal")
                               .hashKey("client-1")
                               .header("type", "expiry-signal")
                               .build()
                           .build()}
read zilla:data.null

# session expire later signal for client-1
read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1#expiry-signal")
                               .hashKey("client-1")
                               .header("type", "expiry-signal")
                               .build()
                           .build()}
read ${mqtt:sessionSignal()
           .expiry()
               .instanceId("zilla-1")
               .clientId("client-1")
               .delay(1000)
               .expireAt(-1)
               .build()
           .build()}

# will message for client-1
read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1#will-1e6a1eb5-810a-459d-a12c-a6fa08f228d1")
                               .hashKey("client-1")
                               .build()
                           .build()}
read ${mqtt:will()
           .topic("obituaries")
           .delay(1000)
           .format("TEXT")
           .lifetimeId("1e6a1eb5-810a-459d-a12c-a6fa08f228d1")
           .willId("d252a6bd-abb5-446a-b0f7-d0a3d8c012e2")
           .payload("client-1 disconnected abruptly")
      .build()}

# will signal for client-1, deliver later
read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1#will-signal")
                               .hashKey("client-1")
                               .header("type", "will-signal")
                               .build()
                           .build()}
read ${mqtt:sessionSignal()
           .will()
               .instanceId("zilla-1")
               .clientId("client-1")
               .delay(1000)
               .deliverAt(-1)
               .lifetimeId("1e6a1eb5-810a-459d-a12c-a6fa08f228d1")
               .willId("d252a6bd-abb5-446a-b0f7-d0a3d8c012e2")
               .build()
           .build()}

write notify RECEIVED_WILL_DELIVER_LATER_SIGNAL

read advised zilla:flush ${kafka:matchFlushEx()
                                .typeId(zilla:id("kafka"))
                                .merged()
                                    .fetch()
                                        .capabilities("PRODUCE_AND_FETCH")
                                        .filter()
                                            .key("client-1")
                                            .build()
                                        .filter()
                                            .key("client-1#migrate")
                                            .headerNot("sender-id", "sender-1")
                                            .build()
                                        .build()
                                .build()}

# no session state
# no migrate signals
write advise zilla:flush

# migrate signal
read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1#migrate")
                               .hashKey("client-1")
                               .header("sender-id", "sender-1")
                               .build()
                           .build()}
read zilla:data.empty

# will signal for client-1, deliver at (now + delay)
read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1#will-signal")
                               .hashKey("client-1")
                               .build()
                           .build()}
read ${mqtt:sessionSignal()
           .will()
               .instanceId("zilla-1")
               .clientId("client-1")
               .delay(1000)
               .deliverAt(2000)
               .lifetimeId("1e6a1eb5-810a-459d-a12c-a6fa08f228d1")
               .willId("d252a6bd-abb5-446a-b0f7-d0a3d8c012e2")
               .build()
           .build()}
read notify RECEIVED_WILL_DELIVER_AT_SIGNAL

read closed
write close


accepted

read zilla:begin.ext ${kafka:matchBeginEx()
                            .typeId(zilla:id("kafka"))
                            .merged()
                                .capabilities("FETCH_ONLY")
                                .topic("mqtt-sessions")
                                .filter()
                                    .key("client-1#will-1e6a1eb5-810a-459d-a12c-a6fa08f228d1")
                                    .build()
                                .build()
                            .build()}

connected

# send session will message for client-1
write zilla:data.ext ${kafka:dataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .fetch()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1#will-1e6a1eb5-810a-459d-a12c-a6fa08f228d1")
                               .build()
                           .build()}
write ${mqtt:will()
            .topic("obituaries")
            .delay(1000)
            .format("TEXT")
            .lifetimeId("1e6a1eb5-810a-459d-a12c-a6fa08f228d1")
            .willId("d252a6bd-abb5-446a-b0f7-d0a3d8c012e2")
            .payload("client-1 disconnected abruptly")
        .build()}
write flush

read closed
write close


accepted

read zilla:begin.ext ${kafka:beginEx()
                            .typeId(zilla:id("kafka"))
                            .merged()
                                .capabilities("PRODUCE_ONLY")
                                .topic("mqtt-messages")
                                .partition(-1, -2)
                                .ackMode("LEADER_ONLY")
                                .build()
                            .build()}


connected

# deliver will message for client-1
read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("obituaries")
                               .header("zilla:filter", "obituaries")
                               .header("zilla:format", "TEXT")
                               .build()
                           .build()}
read "client-1 disconnected abruptly"

read closed
write close
