#
# Copyright 2021-2023 Aklivity Inc
#
# Licensed under the Aklivity Community License (the "License"); you may not use
# this file except in compliance with the License.  You may obtain a copy of the
# License at
#
#   https://www.aklivity.io/aklivity-community-license/
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#

connect "zilla://streams/kafka0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${kafka:beginEx()
                             .typeId(zilla:id("kafka"))
                             .merged()
                                 .capabilities("FETCH_ONLY")
                                 .topic("mqtt-devices")
                                 .filter()
                                     .headers("zilla:filter")
                                         .sequence("device")
                                         .skip(1)
                                         .build()
                                     .build()
                                 .evaluation("EAGER")
                                 .build()
                             .build()}

connected
write notify FETCH_CONNECTED

read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .fetch()
                               .filters(1)
                               .partition(0, 1, 2)
                               .progress(0, 2)
                               .progress(1, 1)
                               .key("device/one")
                               .header("zilla:filter", "device")
                               .header("zilla:filter", "one")
                               .header("zilla:local", "client-2")
                               .header("zilla:format", "TEXT")
                               .build()
                           .build()}
read "Hello, world"

write advise zilla:flush ${kafka:flushEx()
                                .typeId(zilla:id("kafka"))
                                .merged()
                                  .fetch()
                                    .capabilities("FETCH_ONLY")
                                    .filter()
                                        .headers("zilla:filter")
                                            .sequence("device")
                                            .skip(1)
                                            .build()
                                        .build()
                                    .filter()
                                        .headers("zilla:filter")
                                            .sequence("sensor")
                                            .skipMany()
                                            .build()
                                        .build()
                                    .build()
                                .build()}

read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .fetch()
                               .filters(2)
                               .partition(0, 1, 2)
                               .progress(0, 2)
                               .progress(1, 1)
                               .key("sensor/two")
                               .header("zilla:filter", "sensor")
                               .header("zilla:filter", "two")
                               .header("zilla:local", "client-2")
                               .header("zilla:format", "TEXT")
                               .build()
                           .build()}
read "Hello, again"


connect await FETCH_CONNECTED
        "zilla://streams/kafka0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${kafka:beginEx()
                             .typeId(zilla:id("kafka"))
                             .merged()
                                 .capabilities("FETCH_ONLY")
                                 .topic("mqtt-sensors")
                                 .filter()
                                     .headers("zilla:filter")
                                         .sequence("sensor")
                                         .skipMany()
                                         .build()
                                     .build()
                                 .evaluation("EAGER")
                                 .build()
                             .build()}

connected

read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .fetch()
                               .filters(1)
                               .partition(0, 1, 2)
                               .progress(0, 2)
                               .progress(1, 1)
                               .key("sensor/one")
                               .header("zilla:filter", "sensor")
                               .header("zilla:filter", "one")
                               .header("zilla:local", "client-2")
                               .header("zilla:format", "TEXT")
                               .build()
                           .build()}
read "Hi, world"
