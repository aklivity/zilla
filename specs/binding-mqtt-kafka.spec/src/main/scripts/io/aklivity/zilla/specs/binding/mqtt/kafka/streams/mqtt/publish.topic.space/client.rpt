#
# Copyright 2021-2024 Aklivity Inc
#
# Licensed under the Aklivity Community License (the "License"); you may not use
# this file except in compliance with the License.  You may obtain a copy of the
# License at
#
#   https://www.aklivity.io/aklivity-community-license/
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#

connect "zilla://streams/mqtt0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${mqtt:beginEx()
                             .typeId(zilla:id("mqtt"))
                              .publish()
                                .clientId("client-1")
                                .topic("sensor/one")
                                .build()
                             .build()}

connected

write notify PUBLISH_CONNECTED
write zilla:data.ext ${mqtt:dataEx()
                             .typeId(zilla:id("mqtt"))
                             .publish()
                                .format("TEXT")
                                .build()
                             .build()}

write "Hello, world"
write flush


connect await PUBLISH_CONNECTED
        "zilla://streams/mqtt0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${mqtt:beginEx()
                             .typeId(zilla:id("mqtt"))
                              .publish()
                                .clientId("client-1")
                                .topic("device/one")
                                .build()
                             .build()}

connected

write zilla:data.ext ${mqtt:dataEx()
                             .typeId(zilla:id("mqtt"))
                             .publish()
                                .format("TEXT")
                                .build()
                             .build()}

write "Hello, again"
write flush
write notify SENT_DATA


connect await SENT_DATA
        "zilla://streams/mqtt0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${mqtt:beginEx()
                             .typeId(zilla:id("mqtt"))
                             .subscribe()
                                .clientId("client")
                                .filter("sensor/one", 1)
                                .build()
                             .build()}

connect aborted

