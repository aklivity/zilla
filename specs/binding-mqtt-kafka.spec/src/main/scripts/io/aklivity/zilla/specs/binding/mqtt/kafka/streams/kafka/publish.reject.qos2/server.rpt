#
# Copyright 2021-2023 Aklivity Inc
#
# Licensed under the Aklivity Community License (the "License"); you may not use
# this file except in compliance with the License.  You may obtain a copy of the
# License at
#
#   https://www.aklivity.io/aklivity-community-license/
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#

accept "zilla://streams/kafka0"
        option zilla:window 8192
        option zilla:transmission "duplex"

accepted

read zilla:begin.ext ${kafka:matchBeginEx()
                            .typeId(zilla:id("kafka"))
                            .merged()
                                .capabilities("PRODUCE_AND_FETCH")
                                .topic("mqtt-sessions")
                                .filter()
                                    .key("client#migrate")
                                    .headerNot("sender-id", "sender-1")
                                    .build()
                                .build()
                            .build()}

connected

read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client#migrate")
                               .hashKey("client")
                               .header("sender-id", "sender-1")
                               .build()
                           .build()}
read zilla:data.empty

read closed
write close


accepted

read zilla:begin.ext ${kafka:matchBeginEx()
                               .typeId(zilla:id("kafka"))
                               .group()
                                   .groupId("zilla:test-mqtt0-client-session")
                                   .protocol("highlander")
                                   .timeout(1000)
                                   .build()
                               .build()}

connected

# This is the second prerequisite
write advise zilla:flush ${kafka:flushEx()
                             .typeId(zilla:id("kafka"))
                             .group()
                                 .leaderId("consumer-1")
                                 .memberId("consumer-1")
                                 .members("consumer-1")
                                 .build()
                             .build()}
write flush

read zilla:data.empty


accepted

read zilla:begin.ext ${kafka:matchBeginEx()
                            .typeId(zilla:id("kafka"))
                            .merged()
                                .capabilities("PRODUCE_AND_FETCH")
                                .topic("mqtt-sessions")
                                .filter()
                                    .key("client")
                                    .build()
                                .filter()
                                    .key("client#migrate")
                                    .headerNot("sender-id", "sender-1")
                                    .build()
                                .build()
                            .build()}

connected

# session expiry cancellation signal for client
read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client#expiry-signal")
                               .hashKey("client")
                               .header("type", "expiry-signal")
                               .build()
                           .build()}
read zilla:data.null

# session expire later signal for client
read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client#expiry-signal")
                               .hashKey("client")
                               .header("type", "expiry-signal")
                               .build()
                           .build()}
read ${mqtt:sessionSignal()
           .expiry()
               .instanceId("zilla-1")
               .clientId("client")
               .delay(1000)
               .expireAt(-1)
               .build()
           .build()}

write advise zilla:flush
