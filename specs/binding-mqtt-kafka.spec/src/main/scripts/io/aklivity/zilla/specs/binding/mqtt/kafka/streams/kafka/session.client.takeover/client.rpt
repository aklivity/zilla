#
# Copyright 2021-2023 Aklivity Inc
#
# Licensed under the Aklivity Community License (the "License"); you may not use
# this file except in compliance with the License.  You may obtain a copy of the
# License at
#
#   https://www.aklivity.io/aklivity-community-license/
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#

connect "zilla://streams/kafka0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${kafka:beginEx()
                            .typeId(zilla:id("kafka"))
                            .merged()
                                .capabilities("PRODUCE_AND_FETCH")
                                .topic("mqtt-sessions")
                                .groupId("mqtt-clients")
                                .filter()
                                    .key("client-1#migrate")
                                    .headerNot("sender-id", "sender-1")
                                    .build()
                                .build()
                            .build()}

connected

write zilla:data.ext ${kafka:dataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1#migrate")
                               .hashKey("client-1")
                               .header("sender-id", "sender-1")
                               .build()
                           .build()}
write zilla:data.empty
write flush

write close
read closed

write notify INIT_MIGRATE_CLOSED

connect await INIT_MIGRATE_CLOSED
        "zilla://streams/kafka0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${kafka:beginEx()
                               .typeId(zilla:id("kafka"))
                               .group()
                                   .groupId("client-1")
                                   .protocol("highlander")
                                   .timeout(1000)
                                   .build()
                               .build()}

connected

read advised zilla:flush ${kafka:matchFlushEx()
                             .typeId(zilla:id("kafka"))
                             .group()
                                 .leaderId("consumer-1")
                                 .memberId("consumer-1")
                                 .members("consumer-1")
                                 .build()
                             .build()}
write zilla:data.empty

write advise zilla:flush

write notify HEARTBEAT1_SENT

read advised zilla:flush ${kafka:matchFlushEx()
                             .typeId(zilla:id("kafka"))
                             .group()
                                 .leaderId("consumer-1")
                                 .memberId("consumer-1")
                                 .members("consumer-1")
                                 .members("consumer-2")
                                 .build()
                             .build()}
read notify RECEIVED_LEAVE_GROUP_DATA

write close


connect await RECEIVED_LEAVE_GROUP_DATA
        "zilla://streams/kafka0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${kafka:beginEx()
                            .typeId(zilla:id("kafka"))
                            .merged()
                                .capabilities("PRODUCE_AND_FETCH")
                                .topic("mqtt-sessions")
                                .groupId("mqtt-clients")
                                .filter()
                                    .key("client-1")
                                    .build()
                                .filter()
                                    .key("client-1#migrate")
                                    .headerNot("sender-id", "sender-1")
                                    .build()
                                .build()
                            .build()}

connected

write zilla:data.ext ${kafka:dataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1#will-signal")
                               .hashKey("client-1")
                               .header("type", "will-signal")
                               .build()
                           .build()}
write flush

write zilla:data.ext ${kafka:dataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1#expiry-signal")
                               .hashKey("client-1")
                               .header("type", "expiry-signal")
                               .build()
                           .build()}
write flush

write zilla:data.ext ${kafka:dataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1#expiry-signal")
                               .hashKey("client-1")
                               .header("type", "expiry-signal")
                               .build()
                           .build()}
write ${mqtt:sessionSignal()
            .expiry()
                .instanceId("zilla-1")
                .clientId("client-1")
                .delay(1000)
                .expireAt(-1)
                .build()
            .build()}
write flush

read advised zilla:flush

write zilla:data.ext ${kafka:dataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1")
                               .build()
                           .build()}

write ${mqtt:session()
               .subscription("sensor/one", 1)
               .build()}
write flush

read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .fetch()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1")
                               .build()
                           .build()}
read ${mqtt:session()
               .subscription("sensor/one", 1)
               .build()}

read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .fetch()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1#migrate")
                               .header("sender-id", "sender-1")
                               .build()
                           .build()}
read zilla:data.empty

write zilla:data.ext ${kafka:dataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1#migrate")
                               .hashKey("client-1")
                               .header("sender-id", "sender-1")
                               .build()
                           .build()}
write zilla:data.empty
write flush

# will signal for client-1, deliver at (now + delay)
write zilla:data.ext ${kafka:dataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1#will-signal")
                               .hashKey("client-1")
                               .build()
                           .build()}
write ${mqtt:sessionSignal()
            .will()
                .instanceId("zilla-1")
                .clientId("client-1")
                .delay(0)
                .deliverAt(1000)
                .build()
            .build()}
write flush

write close
read closed

write notify SESSION_STATE1_CLOSED

connect await SESSION_STATE1_CLOSED
        "zilla://streams/kafka0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${kafka:beginEx()
                            .typeId(zilla:id("kafka"))
                            .merged()
                                .capabilities("FETCH_ONLY")
                                .topic("mqtt-messages")
                                .filter()
                                    .headers("zilla:filter")
                                        .sequence("sensor")
                                        .sequence("one")
                                        .build()
                                    .build()
                                .evaluation("EAGER")
                                .build()
                            .build()}

connected

write close
read closed

write notify SUBSCRIBE1_CLOSED

connect await SUBSCRIBE1_CLOSED
        "zilla://streams/kafka0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${kafka:beginEx()
                            .typeId(zilla:id("kafka"))
                            .merged()
                                .capabilities("PRODUCE_AND_FETCH")
                                .topic("mqtt-sessions")
                                .groupId("mqtt-clients")
                                .filter()
                                    .key("client-1#migrate")
                                    .headerNot("sender-id", "sender-1")
                                    .build()
                                .build()
                            .build()}

connected

write zilla:data.ext ${kafka:dataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1#migrate")
                               .hashKey("client-1")
                               .header("sender-id", "sender-1")
                               .build()
                           .build()}
write zilla:data.empty
write flush

write notify FIRST_CLIENT_LEFT

read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .fetch()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1#migrate")
                               .header("sender-id", "sender-1")
                               .build()
                           .build()}
read zilla:data.empty

write close
read closed

write notify INIT_MIGRATE2_FINISHED

connect await INIT_MIGRATE2_FINISHED
        "zilla://streams/kafka0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${kafka:beginEx()
                               .typeId(zilla:id("kafka"))
                               .group()
                                   .groupId("client-1")
                                   .protocol("highlander")
                                   .timeout(1000)
                                   .build()
                               .build()}

connected

read advised zilla:flush ${kafka:matchFlushEx()
                             .typeId(zilla:id("kafka"))
                             .group()
                                 .leaderId("consumer-1")
                                 .memberId("consumer-2")
                                 .members("consumer-1")
                                 .members("consumer-2")
                                 .build()
                             .build()}

write zilla:data.empty

write advise zilla:flush

read advised zilla:flush ${kafka:matchFlushEx()
                             .typeId(zilla:id("kafka"))
                             .group()
                                 .leaderId("consumer-2")
                                 .memberId("consumer-2")
                                 .members("consumer-2")
                                 .build()
                             .build()}
read notify RECEIVED_LEADER2

write zilla:data.empty


connect await RECEIVED_LEADER2
        "zilla://streams/kafka0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${kafka:beginEx()
                            .typeId(zilla:id("kafka"))
                            .merged()
                                .capabilities("PRODUCE_AND_FETCH")
                                .topic("mqtt-sessions")
                                .groupId("mqtt-clients")
                                .filter()
                                    .key("client-1")
                                    .build()
                                .filter()
                                    .key("client-1#migrate")
                                    .headerNot("sender-id", "sender-1")
                                    .build()
                                .build()
                            .build()}

connected

write zilla:data.ext ${kafka:dataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1#will-signal")
                               .hashKey("client-1")
                               .header("type", "will-signal")
                               .build()
                           .build()}
write flush


write zilla:data.ext ${kafka:dataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1#expiry-signal")
                               .hashKey("client-1")
                               .header("type", "expiry-signal")
                               .build()
                           .build()}
write flush

write zilla:data.ext ${kafka:dataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1#expiry-signal")
                               .hashKey("client-1")
                               .header("type", "expiry-signal")
                               .build()
                           .build()}
write ${mqtt:sessionSignal()
            .expiry()
                .instanceId("zilla-1")
                .clientId("client-1")
                .delay(1000)
                .expireAt(-1)
                .build()
            .build()}
write flush

read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .fetch()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client-1")
                               .build()
                           .build()}
read ${mqtt:session()
               .subscription("sensor/one", 1)
               .build()}

read advised zilla:flush

write notify SESSION_STATE2_FINISHED

connect await SESSION_STATE2_FINISHED
        "zilla://streams/kafka0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${kafka:beginEx()
                            .typeId(zilla:id("kafka"))
                            .merged()
                                .capabilities("FETCH_ONLY")
                                .topic("mqtt-messages")
                                .filter()
                                    .headers("zilla:filter")
                                        .sequence("sensor")
                                        .sequence("one")
                                        .build()
                                    .build()
                                .evaluation("EAGER")
                                .build()
                            .build()}

connected

read zilla:data.ext ${kafka:matchDataEx()
                            .typeId(zilla:id("kafka"))
                            .merged()
                              .fetch()
                                .filters(1)
                                .partition(0, 1, 2)
                                .progress(0, 2)
                                .progress(1, 1)
                                .key("sensor/one")
                                .header("zilla:filter", "sensor")
                                .header("zilla:filter", "one")
                                .header("zilla:local", "client-1")
                                .header("zilla:format", "TEXT")
                                .build()
                            .build()}

read "message"

