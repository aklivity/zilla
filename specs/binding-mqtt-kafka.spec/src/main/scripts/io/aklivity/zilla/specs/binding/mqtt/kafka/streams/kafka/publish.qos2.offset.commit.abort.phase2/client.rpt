#
# Copyright 2021-2024 Aklivity Inc
#
# Licensed under the Aklivity Community License (the "License"); you may not use
# this file except in compliance with the License.  You may obtain a copy of the
# License at
#
#   https://www.aklivity.io/aklivity-community-license/
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#

connect "zilla://streams/kafka0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${kafka:beginEx()
                            .typeId(zilla:id("kafka"))
                            .merged()
                                .capabilities("PRODUCE_AND_FETCH")
                                .topic("mqtt-sessions")
                                .groupId("mqtt-clients")
                                .filter()
                                    .key("client#migrate")
                                    .headerNot("sender-id", "sender-1")
                                    .build()
                                .build()
                            .build()}

connected

write zilla:data.ext ${kafka:dataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client#migrate")
                               .hashKey("client")
                               .header("sender-id", "sender-1")
                               .build()
                           .build()}
write zilla:data.empty
write flush
write notify SENT_MIGRATE_SIGNAL


connect await SENT_MIGRATE_SIGNAL
        "zilla://streams/kafka0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${kafka:beginEx()
                               .typeId(zilla:id("kafka"))
                               .group()
                                   .groupId("zilla:test-mqtt0-client-session")
                                   .protocol("highlander")
                                   .timeout(1000)
                                   .build()
                               .build()}

read zilla:begin.ext ${kafka:matchBeginEx()
                               .typeId(zilla:id("kafka"))
                               .group()
                                   .groupId("zilla:test-mqtt0-client-session")
                                   .protocol("highlander")
                                   .instanceId("zilla")
                                   .host("broker1.example.com")
                                   .port(9092)
                                   .timeout(1000)
                                   .build()
                               .build()}

connected

read advised zilla:flush ${kafka:matchFlushEx()
                             .typeId(zilla:id("kafka"))
                             .group()
                                 .leaderId("consumer-1")
                                 .memberId("consumer-1")
                                 .members("consumer-1")
                                 .build()
                             .build()}
read notify RECEIVED_LEADER

write zilla:data.empty
write flush


connect await RECEIVED_LEADER
        "zilla://streams/kafka0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${kafka:beginEx()
                               .typeId(zilla:id("kafka"))
                               .meta()
                                   .topic("mqtt-messages")
                                   .build()
                               .build()}
connected

read zilla:data.ext ${kafka:dataEx()
                              .typeId(zilla:id("kafka"))
                              .meta()
                                  .partition(0, -2)
                                  .partition(1, -2)
                                  .build()
                              .build()}

write close


connect await RECEIVED_LEADER
        "zilla://streams/kafka0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${kafka:beginEx()
                               .typeId(zilla:id("kafka"))
                               .meta()
                                   .topic("mqtt-retained")
                                   .build()
                               .build()}
connected

read zilla:data.ext ${kafka:dataEx()
                              .typeId(zilla:id("kafka"))
                              .meta()
                                  .partition(0, -2)
                                  .build()
                              .build()}
read notify RECEIVED_PARTITION_METADATA

write close


connect await RECEIVED_PARTITION_METADATA
        "zilla://streams/kafka0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${kafka:beginEx()
                               .typeId(zilla:id("kafka"))
                               .offsetFetch()
                                   .groupId("zilla:test-mqtt0-client-session")
                                   .host("broker1.example.com")
                                   .port(9092)
                                   .topic("mqtt-messages")
                                   .partition(0)
                                   .partition(1)
                                   .build()
                               .build()}
connected

read zilla:data.ext ${kafka:dataEx()
                                   .typeId(zilla:id("kafka"))
                                   .offsetFetch()
                                       .partition(0, 1, 0)
                                       .partition(1, 1, 0)
                                     .build()
                                   .build()}
read zilla:data.empty

write close
read closed


connect await RECEIVED_PARTITION_METADATA
        "zilla://streams/kafka0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${kafka:beginEx()
                               .typeId(zilla:id("kafka"))
                               .offsetFetch()
                                   .groupId("zilla:test-mqtt0-client-session")
                                   .host("broker1.example.com")
                                   .port(9092)
                                   .topic("mqtt-retained")
                                   .partition(0)
                                   .build()
                               .build()}
connected

read zilla:data.ext ${kafka:dataEx()
                                   .typeId(zilla:id("kafka"))
                                   .offsetFetch()
                                       .partition(0, 1, 0)
                                     .build()
                                   .build()}
read zilla:data.empty
read notify RECEIVED_INITIAL_OFFSETS

write close
read closed


connect await RECEIVED_INITIAL_OFFSETS
        "zilla://streams/kafka0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${kafka:beginEx()
                            .typeId(zilla:id("kafka"))
                            .initProducerId()
                                .producerId(0)
                                .producerEpoch(0)
                                .build()
                            .build()}

read zilla:begin.ext ${kafka:beginEx()
                            .typeId(zilla:id("kafka"))
                            .initProducerId()
                                .producerId(1)
                                .producerEpoch(1)
                                .build()
                            .build()}
read notify RECEIVED_PRODUCER

connected

write close
read closed


connect await RECEIVED_PRODUCER
        "zilla://streams/kafka0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${kafka:beginEx()
                               .typeId(zilla:id("kafka"))
                               .offsetCommit()
                                   .groupId("zilla:test-mqtt0-client-session")
                                   .memberId("consumer-1")
                                   .instanceId("zilla")
                                   .host("broker1.example.com")
                                   .port(9092)
                                   .build()
                               .build()}

connected

read notify RECEIVED_SESSION_CONNECTED
read aborted

connect await RECEIVED_PRODUCER
        "zilla://streams/kafka0"
         option zilla:window 8192
         option zilla:transmission "duplex"

write zilla:begin.ext ${kafka:beginEx()
                            .typeId(zilla:id("kafka"))
                            .merged()
                                .capabilities("PRODUCE_AND_FETCH")
                                .topic("mqtt-sessions")
                                .groupId("mqtt-clients")
                                .filter()
                                    .key("client")
                                    .build()
                                .filter()
                                    .key("client#migrate")
                                    .headerNot("sender-id", "sender-1")
                                    .build()
                                .build()
                            .build()}

connected

write zilla:data.ext ${kafka:dataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client#expiry-signal")
                               .hashKey("client")
                               .header("type", "expiry-signal")
                               .build()
                           .build()}
write flush

write zilla:data.ext ${kafka:dataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .deferred(0)
                               .partition(-1, -1)
                               .key("client#expiry-signal")
                               .hashKey("client")
                               .header("type", "expiry-signal")
                               .build()
                           .build()}
write ${mqtt:sessionSignal()
            .expiry()
                .instanceId("zilla-1")
                .clientId("client")
                .delay(1000)
                .expireAt(-1)
                .build()
            .build()}
write flush

