#
# Copyright 2021-2023 Aklivity Inc
#
# Licensed under the Aklivity Community License (the "License"); you may not use
# this file except in compliance with the License.  You may obtain a copy of the
# License at
#
#   https://www.aklivity.io/aklivity-community-license/
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#

accept "zilla://streams/mqtt0"
        option zilla:window 8192
        option zilla:transmission "duplex"

accepted

read zilla:begin.ext ${mqtt:matchBeginEx()
                             .typeId(zilla:id("mqtt"))
                             .session()
                                .flags("CLEAN_START")
                                .clientId("client")
                                .build()
                             .build()}

write zilla:begin.ext ${mqtt:beginEx()
                              .typeId(zilla:id("mqtt"))
                              .session()
                                .flags("CLEAN_START")
                                .qosMax(2)
                                .packetSizeMax(66560)
                                .capabilities("RETAIN", "WILDCARD", "SUBSCRIPTION_IDS", "SHARED_SUBSCRIPTIONS")
                                .clientId("client")
                                .build()
                              .build()}

connected

write zilla:data.empty
write flush

read zilla:data.ext ${mqtt:dataEx()
                             .typeId(zilla:id("mqtt"))
                             .session()
                                .kind("STATE")
                                .build()
                             .build()}

read ${mqtt:session()
               .subscription("sensor/one", 1, "AT_LEAST_ONCE", "SEND_RETAINED", "RETAIN_AS_PUBLISHED")
               .build()}

write ${mqtt:session()
               .subscription("sensor/one", 1, "AT_LEAST_ONCE", "SEND_RETAINED", "RETAIN_AS_PUBLISHED")
               .build()}
write flush


accepted

read zilla:begin.ext ${mqtt:matchBeginEx()
                             .typeId(zilla:id("mqtt"))
                             .subscribe()
                                 .clientId("client")
                                 .qos("AT_MOST_ONCE")
                                 .filter("sensor/one", 1, "AT_LEAST_ONCE", "SEND_RETAINED",  "RETAIN_AS_PUBLISHED")
                                 .build()
                             .build()}

connected


accepted

read zilla:begin.ext ${mqtt:matchBeginEx()
                             .typeId(zilla:id("mqtt"))
                             .subscribe()
                                 .clientId("client")
                                 .qos("AT_LEAST_ONCE")
                                 .filter("sensor/one", 1, "AT_LEAST_ONCE", "SEND_RETAINED", "RETAIN_AS_PUBLISHED")
                                 .build()
                             .build()}

connected

write zilla:data.ext ${mqtt:dataEx()
                             .typeId(zilla:id("mqtt"))
                             .subscribe()
                                 .topic("sensor/one")
                                 .packetId(1)
                                 .qos("AT_LEAST_ONCE")
                                 .flags("RETAIN")
                                 .subscriptionId(1)
                                 .format("TEXT")
                                 .build()
                             .build()}
write "message"

read advised zilla:flush ${mqtt:flushEx()
                                 .typeId(zilla:id("mqtt"))
                                 .subscribe()
                                     .qos("AT_LEAST_ONCE")
                                     .build()
                                 .build()}
