#
# Copyright 2021-2023 Aklivity Inc
#
# Licensed under the Aklivity Community License (the "License"); you may not use
# this file except in compliance with the License.  You may obtain a copy of the
# License at
#
#   https://www.aklivity.io/aklivity-community-license/
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#

connect "zilla://streams/mqtt0"
         option zilla:window 8192
         option zilla:transmission "duplex"

# qos = 0 -> ackMode = NONE, qos = 1 -> ackMode = IN_SYNC_REPLICAS, qos = 2 -> IN_SYNC_REPLICAS
# separate streams for all qos levels
write zilla:begin.ext ${mqtt:beginEx()
                              .typeId(zilla:id("mqtt"))
                              .publish()
                                .clientId("client")
                                .topic("sensor/one")
                                .qos(2)
                                .build()
                              .build()}

connected

write zilla:data.ext ${mqtt:dataEx()
                            .typeId(zilla:id("mqtt"))
                            .publish()
                                .qos("EXACTLY_ONCE")
                                .packetId(1)
                                .build()
                            .build()}
write "message"
write flush

# triggers PUBREC
read advised zilla:flush ${mqtt:flushEx()
                                 .typeId(zilla:id("mqtt"))
                                 .publish()
                                     .packetId(1)
                                     .build()
                                 .build()}

# Triggered by PUBREL
write advise zilla:flush ${mqtt:flushEx()
                                 .typeId(zilla:id("mqtt"))
                                 .publish()
                                     .packetId(1)
                                     .build()
                                 .build()}

read advised zilla:flush ${mqtt:flushEx()
                                 .typeId(zilla:id("mqtt"))
                                 .publish()
                                     .packetId(1)
                                     .build()
                                 .build()}

write zilla:data.ext ${mqtt:dataEx()
                            .typeId(zilla:id("mqtt"))
                            .publish()
                                .qos("EXACTLY_ONCE")
                                .packetId(1)
                                .build()
                            .build()}
write "message2"
write flush

# triggers PUBREC
read advised zilla:flush ${mqtt:flushEx()
                                 .typeId(zilla:id("mqtt"))
                                 .publish()
                                     .packetId(1)
                                     .build()
                                 .build()}

# Triggered by PUBREL
write advise zilla:flush ${mqtt:flushEx()
                                 .typeId(zilla:id("mqtt"))
                                 .publish()
                                     .packetId(1)
                                     .build()
                                 .build()}

read advised zilla:flush ${mqtt:flushEx()
                                 .typeId(zilla:id("mqtt"))
                                 .publish()
                                     .packetId(1)
                                     .build()
                                 .build()}
