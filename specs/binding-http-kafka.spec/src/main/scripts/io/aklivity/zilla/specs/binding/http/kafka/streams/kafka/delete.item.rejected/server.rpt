#
# Copyright 2021-2023 Aklivity Inc
#
# Licensed under the Aklivity Community License (the "License"); you may not use
# this file except in compliance with the License.  You may obtain a copy of the
# License at
#
#   https://www.aklivity.io/aklivity-community-license/
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#

accept "zilla://streams/kafka0"
    option zilla:window 8192
    option zilla:transmission "duplex"

accepted

read zilla:begin.ext ${kafka:beginEx()
                              .typeId(zilla:id("kafka"))
                              .merged()
                                  .capabilities("PRODUCE_ONLY")
                                  .topic("items-commands")
                                  .partition(-1, -2)
                                  .ackMode("LEADER_ONLY")
                                  .build()
                              .build()}

connected

read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .produce()
                               .partition(-1, -1)
                               .key("92d0bf92-63e0-4cfc-ae73-71dee92d1544")
                               .header(":method", "DELETE")
                               .header(":scheme", "https")
                               .header(":authority", "example.com:9090")
                               .header(":path", "/items/92d0bf92-63e0-4cfc-ae73-71dee92d1544")
                               .header("idempotency-key", "7101a8ea-5745-43c8-8d0c-b2f9baba7004")
                               .header("zilla:reply-to", "items-replies")
                               .header("zilla:identity", "test")
                               .build()
                           .build()}
read zilla:data.empty

write zilla:reset.ext ${kafka:resetEx()
                           .typeId(zilla:id("kafka"))
                           .error(2)
                           .build()}
read abort
write aborted
