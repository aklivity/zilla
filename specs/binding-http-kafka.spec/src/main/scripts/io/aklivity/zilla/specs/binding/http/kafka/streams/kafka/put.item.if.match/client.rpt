#
# Copyright 2021-2023 Aklivity Inc
#
# Licensed under the Aklivity Community License (the "License"); you may not use
# this file except in compliance with the License.  You may obtain a copy of the
# License at
#
#   https://www.aklivity.io/aklivity-community-license/
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#

connect "zilla://streams/kafka0"
    option zilla:window 8192
    option zilla:transmission "duplex"

write zilla:begin.ext ${kafka:beginEx()
                             .typeId(zilla:id("kafka"))
                             .merged()
                                 .capabilities("PRODUCE_ONLY")
                                 .topic("items-commands")
                                 .partition(-1, -2)
                                 .ackMode("LEADER_ONLY")
                                 .build()
                             .build()}

connected

write option zilla:flags "init"
write zilla:data.ext ${kafka:dataEx()
                            .typeId(zilla:id("kafka"))
                            .merged()
                              .produce()
                                .deferred(20)
                                .partition(-1, -1)
                                .key("92d0bf92-63e0-4cfc-ae73-71dee92d1544")
                                .header(":method", "PUT")
                                .header(":scheme", "https")
                                .header(":authority", "example.com:9090")
                                .header(":path", "/items/92d0bf92-63e0-4cfc-ae73-71dee92d1544")
                                .header("content-type", "application/json")
                                .header("if-match", "revision=42")
                                .header("idempotency-key", "3f96592e-c8f1-4167-8c46-85f2aabb70a5")
                                .header("zilla:reply-to", "items-replies")
                                .header("zilla:identity", "test")
                                .build()
                            .build()}
write zilla:data.empty
write flush

write option zilla:flags "none"
write '{ "name": "widget" }'
write flush

write notify SENT_ASYNC_REQUEST

write await RECEIVED_ASYNC_FLUSH

write option zilla:flags "fin"
write zilla:data.ext ${kafka:dataEx()
                            .typeId(zilla:id("kafka"))
                            .merged()
                              .produce()
                                .partition(-1, -1)
                                .header("zilla:correlation-id", "3f96592e-c8f1-4167-8c46-85f2aabb70a5-7e0564551d9ebbf052c729eac90d815b")
                                .build()
                            .build()}
write zilla:data.empty
write flush

write notify SENT_ASYNC_REQUEST
write close
read closed

connect await SENT_ASYNC_REQUEST
        "zilla://streams/kafka0"
    option zilla:window 8192
    option zilla:transmission "duplex"

write zilla:begin.ext ${kafka:beginEx()
                               .typeId(zilla:id("kafka"))
                               .merged()
                                   .capabilities("FETCH_ONLY")
                                   .topic("items-replies")
                                   .partition(-1, -2)
                                   .filter()
                                     .header("zilla:correlation-id", "3f96592e-c8f1-4167-8c46-85f2aabb70a5-7e0564551d9ebbf052c729eac90d815b")
                                     .build()
                                   .build()
                               .build()}

connected

read advised zilla:flush

read notify RECEIVED_ASYNC_FLUSH

read zilla:data.ext ${kafka:matchDataEx()
                           .typeId(zilla:id("kafka"))
                           .merged()
                             .fetch()
                               .partition(0, 1, 2)
                               .progress(0, 2)
                               .progress(1, 1)
                               .key("92d0bf92-63e0-4cfc-ae73-71dee92d1544")
                               .header(":status", "204")
                               .header("zilla:correlation-id", "3f96592e-c8f1-4167-8c46-85f2aabb70a5-7e0564551d9ebbf052c729eac90d815b")
                               .build()
                           .build()}
read zilla:data.null

read closed
write close
