#
# Copyright 2021-2023 Aklivity Inc.
#
# Aklivity licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

# TODO: revert this script to use k3po http transport as in k3po http specification once k3po
#       is enhanced to support manifesting this as high-level http

property newHandshakeKey ${ws:handshakeKey()}
property writeMask ${http:randomBytes(4)}
property client124 ${http:randomBytesUTF8(124)}

connect "zilla://streams/net0"
  option zilla:window 8192
  option zilla:transmission "half-duplex"

write zilla:begin.ext ${http:beginEx()
                              .typeId(zilla:id("http"))
                              .header(":method", "GET")
                              .header(":scheme", "http")
                              .header(":authority", "localhost:8080")
                              .header(":path", "/echo")
                              .header("upgrade", "websocket")
                              .header("connection", "upgrade")
                              .header("sec-websocket-key", newHandshakeKey)
                              .header("sec-websocket-version", "13")
                              .build()}

connected

read zilla:begin.ext ${http:beginEx()
                             .typeId(zilla:id("http"))
                             .header(":status", "101")
                             .header("upgrade", "websocket")
                             .header("connection", "upgrade")
                             .header("sec-websocket-accept", ws:handshakeHash(newHandshakeKey))
                             .build()}

write [0x8a 0xfe 0x00 0x7e] ${writeMask}
write option mask ${writeMask}
write [0x03 0xe8] ${client124}
write option mask [0x00 0x00 0x00 0x00]

read [0x88 0x02 0x03 0xea]
