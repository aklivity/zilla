/*
 * Copyright 2021-2023 Aklivity Inc.
 *
 * Aklivity licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
scope http
{
    struct HttpHeader
    {
        string8 name;
        string16 value;
    }

    scope stream
    {
        struct HttpBeginEx extends core::stream::Extension
        {
            HttpHeader[] headers;
        }

        struct HttpFlushEx extends core::stream::Extension
        {
            int64 promiseId;
            HttpHeader[] promise;
        }

        struct HttpEndEx extends core::stream::Extension
        {
            HttpHeader[] trailers;
        }

        struct HttpResetEx extends core::stream::Extension
        {
            HttpHeader[] headers;
        }

        struct HttpChallengeEx extends core::stream::Extension
        {
            HttpHeader[] headers;
        }
    }

    scope event
    {
        enum HttpEventType (uint8)
        {
            CORS_PREFLIGHT_REQUEST_NOT_ALLOWED (1),
            CORS_REQUEST_NOT_ALLOWED (2),
            GUARD_AUTHORIZATION_FAILURE (3),
            GUARD_AUTHORIZATION_SUCCESS (4),
            ROUTE_NOT_FOUND (5),
            ROUTE_FOUND (6)
        }

        enum Level
        {
            INFO,
            WARNING,
            ERROR
        }

        struct HttpEventCommon
        {
            int64 timestamp = 0;
            int64 originId;
            int64 routedId;
            int64 initialId;
            int64 replyId;
            int64 affinity;
            int64 authorization = 0;
            int64 budgetId;
            int64 traceId;
        }

        struct HttpEventCorsPreflightRequestNotAllowed extends HttpEventCommon
        {
            Level level = WARNING;
        }

        struct HttpEventCorsRequestNotAllowed extends HttpEventCommon
        {
            Level level = WARNING;
        }

        struct HttpEventGuardAuthorizationFailure extends HttpEventCommon
        {
            Level level = WARNING;
        }

        struct HttpEventGuardAuthorizationSuccess extends HttpEventCommon
        {
            Level level = INFO;
        }

        struct HttpEventRouteNotFound extends HttpEventCommon
        {
            Level level = WARNING;
        }

        struct HttpEventRouteFound extends HttpEventCommon
        {
            Level level = INFO;
        }

        union HttpEvent switch (HttpEventType)
        {
            case CORS_PREFLIGHT_REQUEST_NOT_ALLOWED: HttpEventCorsPreflightRequestNotAllowed corsPreflightRequestNotAllowed;
            case CORS_REQUEST_NOT_ALLOWED: HttpEventCorsRequestNotAllowed corsRequestNotAllowed;
            case GUARD_AUTHORIZATION_FAILURE: HttpEventGuardAuthorizationFailure guardAuthorizationFailure;
            case GUARD_AUTHORIZATION_SUCCESS: HttpEventGuardAuthorizationSuccess guardAuthorizationSuccess;
            case ROUTE_NOT_FOUND: HttpEventRouteNotFound routeNotFound;
            case ROUTE_FOUND: HttpEventRouteFound routeFound;
        }
    }
}
