/*
 * Copyright 2021-2023 Aklivity Inc.
 *
 * Aklivity licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
scope http
{
    struct HttpHeader
    {
        string8 name;
        string16 value;
    }

    scope stream
    {
        struct HttpBeginEx extends core::stream::Extension
        {
            HttpHeader[] headers;
        }

        struct HttpFlushEx extends core::stream::Extension
        {
            int64 promiseId;
            HttpHeader[] promise;
        }

        struct HttpEndEx extends core::stream::Extension
        {
            HttpHeader[] trailers;
        }

        struct HttpResetEx extends core::stream::Extension
        {
            HttpHeader[] headers;
        }

        struct HttpChallengeEx extends core::stream::Extension
        {
            HttpHeader[] headers;
        }
    }

    scope event
    {
        enum HttpEventType (uint8)
        {
            AUTHORIZATION (1),
            REQUEST (2),
            RESPONSE (3)
        }

        enum Result (uint8)
        {
            SUCCESS (0),
            FAILURE (1)
        }

        struct HttpAuthorizationEvent extends core::event::Event
        {
            Result result;
            string8 identity;
        }

        struct HttpRequestEvent extends core::event::Event
        {
            HttpHeader[] headers;
        }

        struct HttpResponseEvent extends core::event::Event
        {
            HttpHeader[] headers;
        }

        union HttpEvent switch (HttpEventType)
        {
            case AUTHORIZATION: HttpAuthorizationEvent authorization;
            case REQUEST: HttpRequestEvent request;
            case RESPONSE: HttpResponseEvent response;
        }
    }
}
