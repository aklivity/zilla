#
# Copyright 2021-2024 Aklivity Inc.
#
# Aklivity licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

accept "zilla://streams/app0"
       option zilla:window 8192
       option zilla:transmission "half-duplex"

# Request 1 - valid path params
accepted
read zilla:begin.ext ${http:matchBeginEx()
                             .typeId(zilla:id("http"))
                             .header(":scheme", "http")
                             .header(":method", "POST")
                             .header(":path", "/valid/1234567890123/1234567890123")
                             .header(":authority", "localhost:8080")
                             .build()}
connected
read closed

write zilla:begin.ext ${http:beginEx()
                              .typeId(zilla:id("http"))
                              .header(":status", "200")
                              .header("content-length", "9")
                              .build()}
write flush

write "response1"
write close


# Request 2 - valid path params, query param
accepted
read zilla:begin.ext ${http:matchBeginEx()
                             .typeId(zilla:id("http"))
                             .header(":scheme", "http")
                             .header(":method", "POST")
                             .header(":path", "/valid/1234567890123/1234567890123?page=1234567890123")
                             .header(":authority", "localhost:8080")
                             .build()}
connected
read closed

write zilla:begin.ext ${http:beginEx()
                              .typeId(zilla:id("http"))
                              .header(":status", "200")
                              .header("content-length", "9")
                              .build()}
write flush

write "response2"
write close


# Request 3 - valid path params, url encoded query param
accepted
read zilla:begin.ext ${http:matchBeginEx()
                             .typeId(zilla:id("http"))
                             .header(":scheme", "http")
                             .header(":method", "POST")
                             .header(":path", "/valid/1234567890123/1234567890123?%70%61%67%65=1234567890123")
                             .header(":authority", "localhost:8080")
                             .build()}
connected
read closed

write zilla:begin.ext ${http:beginEx()
                              .typeId(zilla:id("http"))
                              .header(":status", "200")
                              .header("content-length", "9")
                              .build()}
write flush

write "response3"
write close


# Request 4 - valid path params, query param, header field
accepted
read zilla:begin.ext ${http:matchBeginEx()
                             .typeId(zilla:id("http"))
                             .header(":scheme", "http")
                             .header(":method", "POST")
                             .header(":path", "/valid/1234567890123/1234567890123?page=1234567890123")
                             .header(":authority", "localhost:8080")
                             .header("code", "1234567890123")
                             .build()}
connected
read closed

write zilla:begin.ext ${http:beginEx()
                              .typeId(zilla:id("http"))
                              .header(":status", "200")
                              .header("content-length", "9")
                              .build()}
write flush

write "response4"
write close


# Request 5 - valid path params, query param, header field, content
accepted
read zilla:begin.ext ${http:matchBeginEx()
                             .typeId(zilla:id("http"))
                             .header(":scheme", "http")
                             .header(":method", "POST")
                             .header(":path", "/valid/1234567890123/1234567890123?page=1234567890123")
                             .header(":authority", "localhost:8080")
                             .header("code", "1234567890123")
                             .header("content-type", "text/plain;charset=UTF-8")
                             .header("content-length", "13")
                             .build()}
connected

read "1234567890123"
read closed

write zilla:begin.ext ${http:beginEx()
                              .typeId(zilla:id("http"))
                              .header(":status", "200")
                              .header("content-length", "9")
                              .build()}
write flush

write "response5"
write close
