/*
 * Copyright 2021-2023 Aklivity Inc
 *
 * Licensed under the Aklivity Community License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at
 *
 *   https://www.aklivity.io/aklivity-community-license/
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */
scope karapace
{
    scope event
    {
        enum KarapaceEventType (uint8)
        {
            REMOTE_ACCESS_REJECTED (1),
            FUTURE_COMPLETED_EXCEPTIONALLY (2),
            STALE_SCHEMA_SERVED (3)
        }

        struct KarapaceRemoteAccessRejectedEx extends core::stream::Extension
        {
            string8 method;
            string16 url;
            int16 status;
        }

        struct KarapaceFutureCompletedExceptionallyEx extends core::stream::Extension
        {
            string8 error;
        }

        struct KarapaceStaleSchemaServedEx extends core::stream::Extension
        {
             int32 schemaId;
        }

        union KarapaceEventEx switch (KarapaceEventType)
        {
            case REMOTE_ACCESS_REJECTED: KarapaceRemoteAccessRejectedEx remoteAccessRejected;
            case FUTURE_COMPLETED_EXCEPTIONALLY: KarapaceFutureCompletedExceptionallyEx futureCompletedExceptionally;
            case STALE_SCHEMA_SERVED: KarapaceStaleSchemaServedEx staleSchemaServed;
        }
    }
}
