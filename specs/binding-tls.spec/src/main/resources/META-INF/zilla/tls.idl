/*
 * Copyright 2021-2023 Aklivity Inc.
 *
 * Aklivity licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
scope tls
{
    scope event
    {
        enum TlsEventType (uint8)
        {
            TLS_FAILED (1)
        }

        enum TlsError (uint8)
        {
            PROTOCOL_ERROR (1),
            KEY_ERROR (2),
            HANDSHAKE_ERROR (3),
            PEER_UNVERIFIED_ERROR (4),
            UNSPECIFIED_ERROR (5)
        }

        struct TlsFailedEvent extends core::event::BindingEvent
        {
            TlsError error;
        }

        union TlsEvent switch (TlsEventType)
        {
            case TLS_FAILED: TlsFailedEvent tlsFailed;
        }
    }
}
