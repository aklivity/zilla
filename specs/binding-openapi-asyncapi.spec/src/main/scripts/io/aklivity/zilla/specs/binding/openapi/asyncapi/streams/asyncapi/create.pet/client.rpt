#
# Copyright 2021-2024 Aklivity Inc
#
# Licensed under the Aklivity Community License (the "License"); you may not use
# this file except in compliance with the License.  You may obtain a copy of the
# License at
#
#   https://www.aklivity.io/aklivity-community-license/
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#

property deltaMillis 0L
property newTimestamp ${kafka:timestamp() + deltaMillis}

connect "zilla://streams/asyncapi_client0"
        option zilla:window 8192
        option zilla:transmission "duplex"

write zilla:begin.ext ${asyncapi:beginEx()
                             .typeId(zilla:id("asyncapi"))
                             .apiId(0)
                             .extension(kafka:beginEx()
                                           .typeId(zilla:id("kafka"))
                                           .merged()
                                               .capabilities("PRODUCE_ONLY")
                                               .topic("petstore")
                                               .partition(-1, -2)
                                               .ackMode("IN_SYNC_REPLICAS")
                                               .build()
                                            .build())
                             .build()}

connected

write option zilla:flags "init"
write zilla:data.ext ${kafka:dataEx()
                              .typeId(zilla:id("kafka"))
                              .merged()
                                .produce()
                                  .timestamp(newTimestamp)
                                  .partition(-1, -1)
                                  .build()
                              .build()}
write zilla:data.empty
write flush

write option zilla:flags "none"
write "{\"id\": 1, \"name\": \"Dog\", \"tag\": \"test\"}"
write flush

write option zilla:flags "fin"
write zilla:data.empty
write flush

write close
read closed
