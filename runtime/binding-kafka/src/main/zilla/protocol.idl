/*
 * Copyright 2021-2023 Aklivity Inc.
 *
 * Aklivity licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
scope protocol
{
    option byteorder network;

    scope codec
    {
        struct RequestHeader
        {
            int32 length;
            int16 apiKey;
            int16 apiVersion;
            int32 correlationId;
            string16 clientId /* = null */;
        }

        struct ResponseHeader
        {
            int32 length;
        }

        scope message
        {
            struct RecordSet
            {
                int32 length;
            }

            struct RecordBatch
            {
                int64 baseOffset;
                int32 length;
                int32 leaderEpoch;
                int8  magic;
                int32 crc;
                int16 attributes;
                int32 lastOffsetDelta;
                int64 firstTimestamp;
                int64 maxTimestamp;
                int64 producerId;
                int16 producerEpoch;
                int32 baseSequence;
                int32 recordCount;
            }

            struct RecordHeader
            {
                varint32 length;
                int8   attributes;
                varint32 timestampDelta;
                varint32 offsetDelta;
                varint32 keyLength;
                octets[keyLength] key = null;
                varint32 valueLength;
            }

            struct RecordTrailer
            {
                varint32 headerCount;
            }

            struct MessageHeader
            {
                varint32 keyLength;
                octets[keyLength] key; // UTF-8 bytes
                varint32 valueLength;
                octets[valueLength] value = null;
            }
        }

        scope config
        {
            struct DescribeConfigsRequest
            {
              int32 resourceCount;
            }

            struct ResourceRequest
            {
                int8 type;
                string16 name;
                int32 configNamesCount;
            }

            struct DescribeConfigsResponse
            {
                int32 correlationId;
                int32 throttleTimeMillis;
                int32 resourceCount;
            }

            struct ResourceResponse
            {
                int16 errorCode;
                string16 errorMessage;
                int8 type;
                string16 name;
                int32 configCount;
            }

            struct ConfigResponse
            {
                string16 name;
                string16 value;
                int8 isReadOnly;
                int8 isDefault;
                int8 isSensitive;
            }
        }

        scope fetch
        {
            struct FetchRequest
            {
                int32 replicaId = -1;
                int32 maxWaitTimeMillis;
                int32 minBytes;
                int32 maxBytes;
                int8 isolationLevel;
                int32 topicCount;
            }

            struct TopicRequest
            {
                string16 name;
                int32 partitionCount;
            }

            struct PartitionRequest
            {
                int32 partitionId;
                int64 fetchOffset;
                int64 logStartOffset = -1;
                int32 maxBytes;
            }

            struct FetchResponse
            {
                int32 correlationId;
                int32 throttleTimeMillis;
                int32 topicCount;
            }

            struct TopicResponse
            {
                string16 name;
                int32 partitionCount;
            }

            struct PartitionResponse
            {
                int32 partitionId;
                int16 errorCode;
                int64 highWatermark;
                int64 lastStableOffset;
                int64 logStartOffset;
                int32 abortedTransactionCount;
            }

            struct TransactionResponse
            {
                int64 producerId;
                int64 firstOffset;
            }

            enum ControlRecordKeyType
            {
                ABORT,
                COMMIT
            }

            struct ControlRecordKey
            {
                int16 version;
                int16 type;
            }
        }

        scope offsets
        {
            enum IsolationLevel
            {
                READ_UNCOMMITTED,
                READ_COMMITTED
            }

            struct OffsetsRequest // version 2
            {
                int32 replicaId = -1;
                IsolationLevel isolationLevel;
                int32 topicCount;
            }

            struct OffsetsTopicRequest
            {
                string16 name;
                int32 partitionCount;
            }

            struct OffsetsPartitionRequest
            {
                int32 partitionId;
                int64 timestamp = -2;
            }

            struct OffsetsResponse
            {
                int32 correlationId;
                int32 throttleTimeMillis;
                int32 topicCount;
            }

            struct OffsetsTopicResponse
            {
                string16 name;
                int32 partitionCount;
            }

            struct OffsetsPartitionResponse
            {
                int32 partitionId;
                int16 errorCode;
                int64 timestamp;
                int64 offset;
            }
        }

        scope metadata
        {
            struct MetadataRequest
            {
                int32 topicCount = 1;
                string16 topicName;   // TODO: string array
                int8 allow_auto_topic_creation = 0;
            }

            struct MetadataResponse
            {
                int32 correlationId;
                int32 throttleTimeMillis;
                int32 brokerCount;
            }

            struct BrokerMetadata
            {
                int32 nodeId;
                string16 host;
                int32 port;
                string16 rack; // = null
            }

            struct MetadataResponsePart2
            {
                string16 clusterId;
                int32 controllerId;
                int32 topicCount;
            }

            struct TopicMetadata
            {
                int16 errorCode;
                string16 topic;
                int8 isInternal;
                int32 partitionCount;
            }

            struct PartitionMetadata
            {
                int16 errorCode;
                int32 partitionId;
                int32 leader;
                int32 replicaCount;
                int32[replicaCount] replicas = null;
                int32 inSyncReplicasCount;
                int32[inSyncReplicasCount] inSyncReplicas = null;
                int32 offlineReplicasCount;
                int32[offlineReplicasCount] offlineReplicas = null;
            }
        }

        scope produce
        {
            struct ProduceRequest // v3
            {
                string16 transactionalId;
                int16 acks;
                int32 timeout;
                int32 topicCount;
            }

            struct ProduceTopicRequest
            {
                string16 topic;
                int32 partitionCount;
            }

            struct ProducePartitionRequest
            {
                int32 partitionId;
                int32 recordSetLength;
            }

            struct ProduceResponse // v3
            {
                int32 correlationId;
                int32 topicCount;
            }

            struct ProduceTopicResponse
            {
                string16 topic;
                int32 partitionCount;
            }

            struct ProducePartitionResponse
            {
                int32 partitionId;
                int16 errorCode;
                int64 baseOffset;
                int64 logAppendTime;
            }

            struct ProduceResponseTrailer
            {
                int32 throttleTimeMillis;
            }
        }

        scope group
        {
            struct FindCoordinatorRequest
            {
                string16 key;
                int8 keyType;
            }

            struct FindCoordinatorResponse
            {
                int32 correlationId;
                int32 throttleTimeMillis;
                int16 errorCode;
                string16 errorMessage = null;
                int32 nodeId;
                string16 host;
                int32 port;
            }

            struct JoinGroupRequest
            {
                string16 groupId;
                int32 sessionTimeoutMillis;
                int32 rebalanceTimeoutMillis;
                string16 memberId;
                string16 groupInstanceId = null;
                string16 protocolType;
                int32 protocolCount;
            }

            struct ProtocolMetadata
            {
                string16 name;
                uint32 metadataLength;
                octets[metadataLength] metadata;
            }

            struct RangeProtocol
            {
                int32 version;
                string16 topic;
                int32 partitionCount;
            }

            struct JoinGroupResponse
            {
                int32 correlationId;
                int32 throttleTimeMillis;
                int16 errorCode;
                int32 generatedId;
                string16 protocolName;
                string16 leader;
                string16 memberId;
                int32 memberCount;
            }

            struct MemberMetadata
            {
                string16 memberId;
                string16 groupInstanceId = null;
                uint32 length;
                octets[length] metadata;
            }

            struct SyncGroupRequest
            {
                string16 groupId;
                int32 generatedId;
                string16 memberId;
                string16 groupInstanceId = null;
                int32 assignmentCount;
            }

            struct Assignment
            {
               string16 memberId;
               int32 length;
               octets[length] value = null;
            }

            struct Partition
            {
                int32 partitionId;
                int32 offsetId;
            }

            struct SyncGroupResponse
            {
                int32 correlationId;
                int32 throttleTimeMillis;
                int16 errorCode;
                uint32 assignmentLength;
                octets[assignmentLength] assignment;
            }

            struct HeartbeatRequest
            {
                string16 groupId;
                int32 generatedId;
                string16 memberId;
                string16 groupInstanceId = null;
            }

            struct HeartbeatResponse
            {
                int32 correlationId;
                int32 throttleTimeMillis;
                int16 errorCode;
            }

            struct LeaveGroupRequest
            {
                string16 groupId;
                int32 memberCount;
            }

            struct LeaveGroupResponse
            {
                int32 correlationId;
                int32 throttleTimeMillis;
                int16 errorCode;
                int32 memberCount;
            }

            struct LeaveMemberRequest
            {
                string16 memberId;
                string16 groupInstanceId = null;
            }

            struct LeaveMemberResponse
            {
                string16 memberId;
                string16 groupInstanceId = null;
                int16 errorCode;
            }

            struct OffsetCommitRequest
            {
                string16 groupId;
                int32 generationId;
                string16 memberId;
                string16 groupInstanceId = null;
                int32 topicCount;
            }

            struct OffsetCommitTopicRequest
            {
                string16 name;
                int32 partitionCount;
            }

            struct OffsetCommitTopicPartitionRequest
            {
                int32 partitionIndex;
                int64 partitionOffset;
                int32 leaderEpoch;
                string16 metadata = null;
            }

            struct OffsetCommitResponse
            {
                int32 correlationId;
                int32 throttleTimeMs;
                int32 topicCount;
            }

            struct OffsetCommitTopicResponse
            {
                string16 name;
                int32 partitionCount;
            }

            struct OffsetCommitTopicPartitionResponse
            {
                int32 partitionIndex;
                int16 errorCode;
            }

            struct OffsetFetchRequest
            {
                string16 groupId;
                int32 topicCount;
            }

            struct OffsetFetchTopicRequest
            {
                string16 name;
                int32 partitionsCount;
            }

            struct OffsetFetchTopicPartitionRequest
            {
                int32 partitionIndex;
            }

            struct OffsetFetchResponse
            {
                int32 correlationId;
                int32 throttleTimeMillis;
                int32 topicCount;
            }

            struct OffsetFetchTopicResponse
            {
                string16 name;
                int32 partitionCount;
            }

            struct OffsetFetchPartitionResponse
            {
                int32 partitionIndex;
                int64 committedOffset;
                int32 committedLeaderEpoch;
                string16 metadata = null;
                int16 errorCode;
            }

            struct OffsetFetchErrorResponse
            {
                int16 code;
            }
        }

        scope sasl
        {
            struct SaslHandshakeRequest // v1
            {
                string16 mechanism;
            }

            struct SaslHandshakeResponse // v1
            {
                int32 correlationId;
                int16 errorCode;
                int32 mechanismCount;
            }

            struct SaslHandshakeMechanismResponse
            {
                string16 mechanism;
            }

            struct SaslAuthenticateRequest // v1
            {
                int32 authBytesLen;
                octets[authBytesLen] authBytes = null;
            }

            struct SaslAuthenticateResponse // v1
            {
                int32 correlationId;
                int16 errorCode;
                string16 errorMessage;
                int32 authBytesLen;
                octets[authBytesLen] authBytes = null;
                int64 sessionLifetimeMs;
            }
        }

        scope consumer
        {
            struct ConsumerPartition
            {
                int32 partitionId;
            }

            struct ConsumerTopicPartition
            {
                string16 topic;
                int32 partitionCount;
            }

            struct ConsumerSubscriptionUserdata
            {
                uint32 userdataLength;
                octets[userdataLength] userdata;
                int32 ownedPartitions;
            }

            struct ConsumerAssignmentUserdata
            {
                uint32 userdataLength;
                octets[userdataLength] userdata;
            }

            struct ConsumerMetadataTopic
            {
                string16 name;
            }

            struct ConsumerSubscriptionMetadata
            {
                int16 version;
                int32 metadataTopicCount;
            }

            struct ConsumerAssignmentMetadata
            {
                int16 version;
                int32 metadataTopicCount;
            }
        }
    }
}
