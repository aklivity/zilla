RULE onClientData
CLASS ^java.nio.channels.SocketChannel
METHOD write(java.nio.ByteBuffer)
HELPER io.aklivity.zilla.runtime.binding.tcp.internal.SocketChannelHelper$OnDataHelper
IF callerEquals("TcpClientFactory$TcpClient.onAppData", true, 2)
DO return doWrite($0, $1);
ENDRULE

RULE onClientWritable
CLASS ^java.nio.channels.SocketChannel
METHOD write(java.nio.ByteBuffer)
HELPER io.aklivity.zilla.runtime.binding.tcp.internal.SocketChannelHelper$HandleWriteHelper
IF callerEquals("TcpClientFactory$TcpClient.onNetWritable", true, 2)
DO return doWrite($0, $1);
ENDRULE

RULE onServerData
CLASS ^java.nio.channels.SocketChannel
METHOD write(java.nio.ByteBuffer)
HELPER io.aklivity.zilla.runtime.binding.tcp.internal.SocketChannelHelper$OnDataHelper
IF callerEquals("TcpServerFactory$TcpServer.onAppData", true, 2)
DO return doWrite($0, $1);
ENDRULE

RULE onServerWritable
CLASS ^java.nio.channels.SocketChannel
METHOD write(java.nio.ByteBuffer)
HELPER io.aklivity.zilla.runtime.binding.tcp.internal.SocketChannelHelper$HandleWriteHelper
IF callerEquals("TcpServerFactory$TcpServer.onNetWritable", true, 2)
DO return doWrite($0, $1);
ENDRULE

RULE doConnect
CLASS ^java.nio.channels.SocketChannel
METHOD isConnectionPending()
HELPER io.aklivity.zilla.runtime.binding.tcp.internal.SocketChannelHelper$DoConnectHelper
IF callerEquals("TcpClientFactory$TcpClient.doNetShutdownOutput", true, 2)
DO return isConnectionPending($0);
ENDRULE
